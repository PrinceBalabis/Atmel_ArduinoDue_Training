
PWM_PWM_LED_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a30  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00082a30  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000104  20070974  000833a4  00010974  2**2
                  ALLOC
  3 .stack        00002000  20070a78  000834a8  00010974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ad13  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c1d  00000000  00000000  0001b70b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004566  00000000  00000000  0001d328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a20  00000000  00000000  0002188e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000930  00000000  00000000  000222ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d7f  00000000  00000000  00022bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b7fa  00000000  00000000  0003995d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063a58  00000000  00000000  00045157  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e5c  00000000  00000000  000a8bb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072a78 	.word	0x20072a78
   80004:	00080945 	.word	0x00080945
   80008:	00080941 	.word	0x00080941
   8000c:	00080941 	.word	0x00080941
   80010:	00080941 	.word	0x00080941
   80014:	00080941 	.word	0x00080941
   80018:	00080941 	.word	0x00080941
	...
   8002c:	00080941 	.word	0x00080941
   80030:	00080941 	.word	0x00080941
   80034:	00000000 	.word	0x00000000
   80038:	00080941 	.word	0x00080941
   8003c:	00080941 	.word	0x00080941
   80040:	00080941 	.word	0x00080941
   80044:	00080941 	.word	0x00080941
   80048:	00080941 	.word	0x00080941
   8004c:	00080941 	.word	0x00080941
   80050:	00080941 	.word	0x00080941
   80054:	00080941 	.word	0x00080941
   80058:	00080941 	.word	0x00080941
   8005c:	00080941 	.word	0x00080941
   80060:	00080941 	.word	0x00080941
   80064:	00080941 	.word	0x00080941
   80068:	00000000 	.word	0x00000000
   8006c:	00080529 	.word	0x00080529
   80070:	0008053d 	.word	0x0008053d
   80074:	00080551 	.word	0x00080551
   80078:	00080565 	.word	0x00080565
	...
   80084:	00080941 	.word	0x00080941
   80088:	00080941 	.word	0x00080941
   8008c:	00080941 	.word	0x00080941
   80090:	00080941 	.word	0x00080941
   80094:	00080941 	.word	0x00080941
   80098:	00080941 	.word	0x00080941
   8009c:	00080941 	.word	0x00080941
   800a0:	00080941 	.word	0x00080941
   800a4:	00000000 	.word	0x00000000
   800a8:	00080941 	.word	0x00080941
   800ac:	00080941 	.word	0x00080941
   800b0:	00080941 	.word	0x00080941
   800b4:	00080941 	.word	0x00080941
   800b8:	00080941 	.word	0x00080941
   800bc:	00080941 	.word	0x00080941
   800c0:	00080941 	.word	0x00080941
   800c4:	00080941 	.word	0x00080941
   800c8:	00080941 	.word	0x00080941
   800cc:	00080941 	.word	0x00080941
   800d0:	00080ca5 	.word	0x00080ca5
   800d4:	00080941 	.word	0x00080941
   800d8:	00080941 	.word	0x00080941
   800dc:	00080941 	.word	0x00080941
   800e0:	00080941 	.word	0x00080941
   800e4:	00080941 	.word	0x00080941
   800e8:	00080941 	.word	0x00080941
   800ec:	00080941 	.word	0x00080941
   800f0:	00080941 	.word	0x00080941

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00082a30 	.word	0x00082a30

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00082a30 	.word	0x00082a30
   80144:	20070978 	.word	0x20070978
   80148:	00082a30 	.word	0x00082a30
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000805e1 	.word	0x000805e1
   80198:	00080635 	.word	0x00080635
   8019c:	00080645 	.word	0x00080645
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080655 	.word	0x00080655
   801ac:	00080579 	.word	0x00080579
   801b0:	000809f5 	.word	0x000809f5

000801b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   801b4:	b9a8      	cbnz	r0, 801e2 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801ba:	460c      	mov	r4, r1
   801bc:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801be:	2a00      	cmp	r2, #0
   801c0:	dd0a      	ble.n	801d8 <_read+0x24>
   801c2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801c4:	4e08      	ldr	r6, [pc, #32]	; (801e8 <_read+0x34>)
   801c6:	4d09      	ldr	r5, [pc, #36]	; (801ec <_read+0x38>)
   801c8:	6830      	ldr	r0, [r6, #0]
   801ca:	4621      	mov	r1, r4
   801cc:	682b      	ldr	r3, [r5, #0]
   801ce:	4798      	blx	r3
		ptr++;
   801d0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	42bc      	cmp	r4, r7
   801d4:	d1f8      	bne.n	801c8 <_read+0x14>
   801d6:	e001      	b.n	801dc <_read+0x28>
   801d8:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   801dc:	4640      	mov	r0, r8
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   801e2:	f04f 30ff 	mov.w	r0, #4294967295
   801e6:	4770      	bx	lr
   801e8:	20070a48 	.word	0x20070a48
   801ec:	20070a40 	.word	0x20070a40

000801f0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   801f0:	3801      	subs	r0, #1
   801f2:	2802      	cmp	r0, #2
   801f4:	d818      	bhi.n	80228 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   801f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801fa:	460e      	mov	r6, r1
   801fc:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   801fe:	b182      	cbz	r2, 80222 <_write+0x32>
   80200:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80202:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8023c <_write+0x4c>
   80206:	4f0c      	ldr	r7, [pc, #48]	; (80238 <_write+0x48>)
   80208:	f8d8 0000 	ldr.w	r0, [r8]
   8020c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80210:	683b      	ldr	r3, [r7, #0]
   80212:	4798      	blx	r3
   80214:	2800      	cmp	r0, #0
   80216:	db0a      	blt.n	8022e <_write+0x3e>
   80218:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8021a:	3c01      	subs	r4, #1
   8021c:	d1f4      	bne.n	80208 <_write+0x18>
   8021e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80222:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   80224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80228:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8022c:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8022e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80236:	bf00      	nop
   80238:	20070a44 	.word	0x20070a44
   8023c:	20070a48 	.word	0x20070a48

00080240 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80240:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80246:	4b16      	ldr	r3, [pc, #88]	; (802a0 <board_init+0x60>)
   80248:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8024a:	200b      	movs	r0, #11
   8024c:	4c15      	ldr	r4, [pc, #84]	; (802a4 <board_init+0x64>)
   8024e:	47a0      	blx	r4
   80250:	200c      	movs	r0, #12
   80252:	47a0      	blx	r4
   80254:	200d      	movs	r0, #13
   80256:	47a0      	blx	r4
   80258:	200e      	movs	r0, #14
   8025a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8025c:	203b      	movs	r0, #59	; 0x3b
   8025e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80262:	4c11      	ldr	r4, [pc, #68]	; (802a8 <board_init+0x68>)
   80264:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80266:	2055      	movs	r0, #85	; 0x55
   80268:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8026c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8026e:	2056      	movs	r0, #86	; 0x56
   80270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80274:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80276:	2068      	movs	r0, #104	; 0x68
   80278:	490c      	ldr	r1, [pc, #48]	; (802ac <board_init+0x6c>)
   8027a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8027c:	205c      	movs	r0, #92	; 0x5c
   8027e:	490c      	ldr	r1, [pc, #48]	; (802b0 <board_init+0x70>)
   80280:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80282:	480c      	ldr	r0, [pc, #48]	; (802b4 <board_init+0x74>)
   80284:	f44f 7140 	mov.w	r1, #768	; 0x300
   80288:	4a0b      	ldr	r2, [pc, #44]	; (802b8 <board_init+0x78>)
   8028a:	4b0c      	ldr	r3, [pc, #48]	; (802bc <board_init+0x7c>)
   8028c:	4798      	blx	r3
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
   8028e:	2055      	movs	r0, #85	; 0x55
   80290:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80294:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_PWM_LED1
	/* Configure PWM LED1 pin */
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
   80296:	2056      	movs	r0, #86	; 0x56
   80298:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8029c:	47a0      	blx	r4
   8029e:	bd10      	pop	{r4, pc}
   802a0:	400e1a50 	.word	0x400e1a50
   802a4:	00080665 	.word	0x00080665
   802a8:	00080365 	.word	0x00080365
   802ac:	28000079 	.word	0x28000079
   802b0:	28000001 	.word	0x28000001
   802b4:	400e0e00 	.word	0x400e0e00
   802b8:	08000001 	.word	0x08000001
   802bc:	00080439 	.word	0x00080439

000802c0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802c0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802c2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802c6:	d016      	beq.n	802f6 <pio_set_peripheral+0x36>
   802c8:	d804      	bhi.n	802d4 <pio_set_peripheral+0x14>
   802ca:	b1c1      	cbz	r1, 802fe <pio_set_peripheral+0x3e>
   802cc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   802d0:	d00a      	beq.n	802e8 <pio_set_peripheral+0x28>
   802d2:	e013      	b.n	802fc <pio_set_peripheral+0x3c>
   802d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   802d8:	d011      	beq.n	802fe <pio_set_peripheral+0x3e>
   802da:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   802de:	d00e      	beq.n	802fe <pio_set_peripheral+0x3e>
   802e0:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   802e4:	d10a      	bne.n	802fc <pio_set_peripheral+0x3c>
   802e6:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   802e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   802ea:	6f01      	ldr	r1, [r0, #112]	; 0x70
   802ec:	400b      	ands	r3, r1
   802ee:	ea23 0302 	bic.w	r3, r3, r2
   802f2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   802f4:	e002      	b.n	802fc <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   802f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   802f8:	4313      	orrs	r3, r2
   802fa:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   802fc:	6042      	str	r2, [r0, #4]
   802fe:	4770      	bx	lr

00080300 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80300:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80302:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80306:	bf14      	ite	ne
   80308:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8030a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8030c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80310:	bf14      	ite	ne
   80312:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80314:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80316:	f012 0f02 	tst.w	r2, #2
   8031a:	d002      	beq.n	80322 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   8031c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80320:	e004      	b.n	8032c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80322:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80326:	bf18      	it	ne
   80328:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8032c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8032e:	6001      	str	r1, [r0, #0]
   80330:	4770      	bx	lr
   80332:	bf00      	nop

00080334 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80334:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80336:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80338:	9c01      	ldr	r4, [sp, #4]
   8033a:	b10c      	cbz	r4, 80340 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   8033c:	6641      	str	r1, [r0, #100]	; 0x64
   8033e:	e000      	b.n	80342 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80340:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80342:	b10b      	cbz	r3, 80348 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80344:	6501      	str	r1, [r0, #80]	; 0x50
   80346:	e000      	b.n	8034a <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80348:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8034a:	b10a      	cbz	r2, 80350 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   8034c:	6301      	str	r1, [r0, #48]	; 0x30
   8034e:	e000      	b.n	80352 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80350:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80352:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80354:	6001      	str	r1, [r0, #0]
}
   80356:	f85d 4b04 	ldr.w	r4, [sp], #4
   8035a:	4770      	bx	lr

0008035c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8035c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8035e:	4770      	bx	lr

00080360 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80360:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80362:	4770      	bx	lr

00080364 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80364:	b570      	push	{r4, r5, r6, lr}
   80366:	b082      	sub	sp, #8
   80368:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8036a:	0943      	lsrs	r3, r0, #5
   8036c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80370:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80374:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80376:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8037a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8037e:	d030      	beq.n	803e2 <pio_configure_pin+0x7e>
   80380:	d806      	bhi.n	80390 <pio_configure_pin+0x2c>
   80382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80386:	d00a      	beq.n	8039e <pio_configure_pin+0x3a>
   80388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8038c:	d018      	beq.n	803c0 <pio_configure_pin+0x5c>
   8038e:	e049      	b.n	80424 <pio_configure_pin+0xc0>
   80390:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80394:	d030      	beq.n	803f8 <pio_configure_pin+0x94>
   80396:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8039a:	d02d      	beq.n	803f8 <pio_configure_pin+0x94>
   8039c:	e042      	b.n	80424 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8039e:	f000 001f 	and.w	r0, r0, #31
   803a2:	2601      	movs	r6, #1
   803a4:	4086      	lsls	r6, r0
   803a6:	4620      	mov	r0, r4
   803a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ac:	4632      	mov	r2, r6
   803ae:	4b1f      	ldr	r3, [pc, #124]	; (8042c <pio_configure_pin+0xc8>)
   803b0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803b6:	bf14      	ite	ne
   803b8:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803ba:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803bc:	2001      	movs	r0, #1
   803be:	e032      	b.n	80426 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803c0:	f000 001f 	and.w	r0, r0, #31
   803c4:	2601      	movs	r6, #1
   803c6:	4086      	lsls	r6, r0
   803c8:	4620      	mov	r0, r4
   803ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803ce:	4632      	mov	r2, r6
   803d0:	4b16      	ldr	r3, [pc, #88]	; (8042c <pio_configure_pin+0xc8>)
   803d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803d8:	bf14      	ite	ne
   803da:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803dc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803de:	2001      	movs	r0, #1
   803e0:	e021      	b.n	80426 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   803e2:	f000 031f 	and.w	r3, r0, #31
   803e6:	2601      	movs	r6, #1
   803e8:	4620      	mov	r0, r4
   803ea:	fa06 f103 	lsl.w	r1, r6, r3
   803ee:	462a      	mov	r2, r5
   803f0:	4b0f      	ldr	r3, [pc, #60]	; (80430 <pio_configure_pin+0xcc>)
   803f2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   803f4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   803f6:	e016      	b.n	80426 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   803f8:	f000 031f 	and.w	r3, r0, #31
   803fc:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803fe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80402:	ea05 0106 	and.w	r1, r5, r6
   80406:	9100      	str	r1, [sp, #0]
   80408:	4620      	mov	r0, r4
   8040a:	fa06 f103 	lsl.w	r1, r6, r3
   8040e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80412:	bf14      	ite	ne
   80414:	2200      	movne	r2, #0
   80416:	2201      	moveq	r2, #1
   80418:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8041c:	4c05      	ldr	r4, [pc, #20]	; (80434 <pio_configure_pin+0xd0>)
   8041e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80420:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80422:	e000      	b.n	80426 <pio_configure_pin+0xc2>

	default:
		return 0;
   80424:	2000      	movs	r0, #0
	}

	return 1;
}
   80426:	b002      	add	sp, #8
   80428:	bd70      	pop	{r4, r5, r6, pc}
   8042a:	bf00      	nop
   8042c:	000802c1 	.word	0x000802c1
   80430:	00080301 	.word	0x00080301
   80434:	00080335 	.word	0x00080335

00080438 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80438:	b570      	push	{r4, r5, r6, lr}
   8043a:	b082      	sub	sp, #8
   8043c:	4606      	mov	r6, r0
   8043e:	460d      	mov	r5, r1
   80440:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80442:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80446:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8044a:	d026      	beq.n	8049a <pio_configure_pin_group+0x62>
   8044c:	d806      	bhi.n	8045c <pio_configure_pin_group+0x24>
   8044e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80452:	d00a      	beq.n	8046a <pio_configure_pin_group+0x32>
   80454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80458:	d013      	beq.n	80482 <pio_configure_pin_group+0x4a>
   8045a:	e034      	b.n	804c6 <pio_configure_pin_group+0x8e>
   8045c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80460:	d01f      	beq.n	804a2 <pio_configure_pin_group+0x6a>
   80462:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80466:	d01c      	beq.n	804a2 <pio_configure_pin_group+0x6a>
   80468:	e02d      	b.n	804c6 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8046a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8046e:	462a      	mov	r2, r5
   80470:	4b16      	ldr	r3, [pc, #88]	; (804cc <pio_configure_pin_group+0x94>)
   80472:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80474:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80478:	bf14      	ite	ne
   8047a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8047c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8047e:	2001      	movs	r0, #1
   80480:	e022      	b.n	804c8 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80482:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80486:	462a      	mov	r2, r5
   80488:	4b10      	ldr	r3, [pc, #64]	; (804cc <pio_configure_pin_group+0x94>)
   8048a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8048c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80490:	bf14      	ite	ne
   80492:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80494:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80496:	2001      	movs	r0, #1
   80498:	e016      	b.n	804c8 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8049a:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <pio_configure_pin_group+0x98>)
   8049c:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8049e:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   804a0:	e012      	b.n	804c8 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   804a2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   804a6:	f004 0301 	and.w	r3, r4, #1
   804aa:	9300      	str	r3, [sp, #0]
   804ac:	4630      	mov	r0, r6
   804ae:	4629      	mov	r1, r5
   804b0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   804b4:	bf14      	ite	ne
   804b6:	2200      	movne	r2, #0
   804b8:	2201      	moveq	r2, #1
   804ba:	f3c4 0380 	ubfx	r3, r4, #2, #1
   804be:	4c05      	ldr	r4, [pc, #20]	; (804d4 <pio_configure_pin_group+0x9c>)
   804c0:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   804c2:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   804c4:	e000      	b.n	804c8 <pio_configure_pin_group+0x90>

	default:
		return 0;
   804c6:	2000      	movs	r0, #0
	}

	return 1;
}
   804c8:	b002      	add	sp, #8
   804ca:	bd70      	pop	{r4, r5, r6, pc}
   804cc:	000802c1 	.word	0x000802c1
   804d0:	00080301 	.word	0x00080301
   804d4:	00080335 	.word	0x00080335

000804d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   804d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804dc:	4604      	mov	r4, r0
   804de:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   804e0:	4b0e      	ldr	r3, [pc, #56]	; (8051c <pio_handler_process+0x44>)
   804e2:	4798      	blx	r3
   804e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   804e6:	4620      	mov	r0, r4
   804e8:	4b0d      	ldr	r3, [pc, #52]	; (80520 <pio_handler_process+0x48>)
   804ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   804ec:	4005      	ands	r5, r0
   804ee:	d013      	beq.n	80518 <pio_handler_process+0x40>
   804f0:	4c0c      	ldr	r4, [pc, #48]	; (80524 <pio_handler_process+0x4c>)
   804f2:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   804f6:	6823      	ldr	r3, [r4, #0]
   804f8:	4543      	cmp	r3, r8
   804fa:	d108      	bne.n	8050e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   804fc:	6861      	ldr	r1, [r4, #4]
   804fe:	4229      	tst	r1, r5
   80500:	d005      	beq.n	8050e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80502:	68e3      	ldr	r3, [r4, #12]
   80504:	4640      	mov	r0, r8
   80506:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80508:	6863      	ldr	r3, [r4, #4]
   8050a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8050e:	42b4      	cmp	r4, r6
   80510:	d002      	beq.n	80518 <pio_handler_process+0x40>
   80512:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80514:	2d00      	cmp	r5, #0
   80516:	d1ee      	bne.n	804f6 <pio_handler_process+0x1e>
   80518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8051c:	0008035d 	.word	0x0008035d
   80520:	00080361 	.word	0x00080361
   80524:	20070990 	.word	0x20070990

00080528 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80528:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8052a:	4802      	ldr	r0, [pc, #8]	; (80534 <PIOA_Handler+0xc>)
   8052c:	210b      	movs	r1, #11
   8052e:	4b02      	ldr	r3, [pc, #8]	; (80538 <PIOA_Handler+0x10>)
   80530:	4798      	blx	r3
   80532:	bd08      	pop	{r3, pc}
   80534:	400e0e00 	.word	0x400e0e00
   80538:	000804d9 	.word	0x000804d9

0008053c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8053c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8053e:	4802      	ldr	r0, [pc, #8]	; (80548 <PIOB_Handler+0xc>)
   80540:	210c      	movs	r1, #12
   80542:	4b02      	ldr	r3, [pc, #8]	; (8054c <PIOB_Handler+0x10>)
   80544:	4798      	blx	r3
   80546:	bd08      	pop	{r3, pc}
   80548:	400e1000 	.word	0x400e1000
   8054c:	000804d9 	.word	0x000804d9

00080550 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80550:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80552:	4802      	ldr	r0, [pc, #8]	; (8055c <PIOC_Handler+0xc>)
   80554:	210d      	movs	r1, #13
   80556:	4b02      	ldr	r3, [pc, #8]	; (80560 <PIOC_Handler+0x10>)
   80558:	4798      	blx	r3
   8055a:	bd08      	pop	{r3, pc}
   8055c:	400e1200 	.word	0x400e1200
   80560:	000804d9 	.word	0x000804d9

00080564 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80564:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80566:	4802      	ldr	r0, [pc, #8]	; (80570 <PIOD_Handler+0xc>)
   80568:	210e      	movs	r1, #14
   8056a:	4b02      	ldr	r3, [pc, #8]	; (80574 <PIOD_Handler+0x10>)
   8056c:	4798      	blx	r3
   8056e:	bd08      	pop	{r3, pc}
   80570:	400e1400 	.word	0x400e1400
   80574:	000804d9 	.word	0x000804d9

00080578 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80578:	4a18      	ldr	r2, [pc, #96]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   8057a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8057c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80580:	4318      	orrs	r0, r3
   80582:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80584:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80586:	f013 0f08 	tst.w	r3, #8
   8058a:	d003      	beq.n	80594 <pmc_switch_mck_to_pllack+0x1c>
   8058c:	e009      	b.n	805a2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8058e:	3b01      	subs	r3, #1
   80590:	d103      	bne.n	8059a <pmc_switch_mck_to_pllack+0x22>
   80592:	e01e      	b.n	805d2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80594:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80598:	4910      	ldr	r1, [pc, #64]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   8059a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8059c:	f012 0f08 	tst.w	r2, #8
   805a0:	d0f5      	beq.n	8058e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   805a2:	4a0e      	ldr	r2, [pc, #56]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   805a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   805a6:	f023 0303 	bic.w	r3, r3, #3
   805aa:	f043 0302 	orr.w	r3, r3, #2
   805ae:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805b0:	6e90      	ldr	r0, [r2, #104]	; 0x68
   805b2:	f010 0008 	ands.w	r0, r0, #8
   805b6:	d004      	beq.n	805c2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   805b8:	2000      	movs	r0, #0
   805ba:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   805bc:	3b01      	subs	r3, #1
   805be:	d103      	bne.n	805c8 <pmc_switch_mck_to_pllack+0x50>
   805c0:	e009      	b.n	805d6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   805c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805c6:	4905      	ldr	r1, [pc, #20]	; (805dc <pmc_switch_mck_to_pllack+0x64>)
   805c8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   805ca:	f012 0f08 	tst.w	r2, #8
   805ce:	d0f5      	beq.n	805bc <pmc_switch_mck_to_pllack+0x44>
   805d0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805d2:	2001      	movs	r0, #1
   805d4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   805d6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   805d8:	4770      	bx	lr
   805da:	bf00      	nop
   805dc:	400e0600 	.word	0x400e0600

000805e0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   805e0:	b138      	cbz	r0, 805f2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805e2:	4911      	ldr	r1, [pc, #68]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   805e4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   805e6:	4a11      	ldr	r2, [pc, #68]	; (8062c <pmc_switch_mainck_to_xtal+0x4c>)
   805e8:	401a      	ands	r2, r3
   805ea:	4b11      	ldr	r3, [pc, #68]	; (80630 <pmc_switch_mainck_to_xtal+0x50>)
   805ec:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   805ee:	620b      	str	r3, [r1, #32]
   805f0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805f2:	4a0d      	ldr	r2, [pc, #52]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   805f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805f6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   805fa:	f023 0303 	bic.w	r3, r3, #3
   805fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80602:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80606:	0209      	lsls	r1, r1, #8
   80608:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8060a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8060c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8060e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80610:	f013 0f01 	tst.w	r3, #1
   80614:	d0fb      	beq.n	8060e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80616:	4a04      	ldr	r2, [pc, #16]	; (80628 <pmc_switch_mainck_to_xtal+0x48>)
   80618:	6a13      	ldr	r3, [r2, #32]
   8061a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8061e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80622:	6213      	str	r3, [r2, #32]
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400e0600 	.word	0x400e0600
   8062c:	fec8fffc 	.word	0xfec8fffc
   80630:	01370002 	.word	0x01370002

00080634 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80634:	4b02      	ldr	r3, [pc, #8]	; (80640 <pmc_osc_is_ready_mainck+0xc>)
   80636:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80638:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8063c:	4770      	bx	lr
   8063e:	bf00      	nop
   80640:	400e0600 	.word	0x400e0600

00080644 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80644:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80648:	4b01      	ldr	r3, [pc, #4]	; (80650 <pmc_disable_pllack+0xc>)
   8064a:	629a      	str	r2, [r3, #40]	; 0x28
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	400e0600 	.word	0x400e0600

00080654 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80654:	4b02      	ldr	r3, [pc, #8]	; (80660 <pmc_is_locked_pllack+0xc>)
   80656:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80658:	f000 0002 	and.w	r0, r0, #2
   8065c:	4770      	bx	lr
   8065e:	bf00      	nop
   80660:	400e0600 	.word	0x400e0600

00080664 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80664:	282c      	cmp	r0, #44	; 0x2c
   80666:	d81e      	bhi.n	806a6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80668:	281f      	cmp	r0, #31
   8066a:	d80c      	bhi.n	80686 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8066c:	4b11      	ldr	r3, [pc, #68]	; (806b4 <pmc_enable_periph_clk+0x50>)
   8066e:	699a      	ldr	r2, [r3, #24]
   80670:	2301      	movs	r3, #1
   80672:	4083      	lsls	r3, r0
   80674:	401a      	ands	r2, r3
   80676:	4293      	cmp	r3, r2
   80678:	d017      	beq.n	806aa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8067a:	2301      	movs	r3, #1
   8067c:	4083      	lsls	r3, r0
   8067e:	4a0d      	ldr	r2, [pc, #52]	; (806b4 <pmc_enable_periph_clk+0x50>)
   80680:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80682:	2000      	movs	r0, #0
   80684:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80686:	4b0b      	ldr	r3, [pc, #44]	; (806b4 <pmc_enable_periph_clk+0x50>)
   80688:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8068c:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8068e:	2301      	movs	r3, #1
   80690:	4083      	lsls	r3, r0
   80692:	401a      	ands	r2, r3
   80694:	4293      	cmp	r3, r2
   80696:	d00a      	beq.n	806ae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80698:	2301      	movs	r3, #1
   8069a:	4083      	lsls	r3, r0
   8069c:	4a05      	ldr	r2, [pc, #20]	; (806b4 <pmc_enable_periph_clk+0x50>)
   8069e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   806a2:	2000      	movs	r0, #0
   806a4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   806a6:	2001      	movs	r0, #1
   806a8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   806aa:	2000      	movs	r0, #0
   806ac:	4770      	bx	lr
   806ae:	2000      	movs	r0, #0
}
   806b0:	4770      	bx	lr
   806b2:	bf00      	nop
   806b4:	400e0600 	.word	0x400e0600

000806b8 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   806b8:	b4f0      	push	{r4, r5, r6, r7}
   806ba:	b08c      	sub	sp, #48	; 0x30
   806bc:	4607      	mov	r7, r0
   806be:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   806c0:	ac01      	add	r4, sp, #4
   806c2:	4d11      	ldr	r5, [pc, #68]	; (80708 <pwm_clocks_generate+0x50>)
   806c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   806ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   806cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   806d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   806d4:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   806d6:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   806d8:	f852 3b04 	ldr.w	r3, [r2], #4
   806dc:	fbb6 f3f3 	udiv	r3, r6, r3
   806e0:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   806e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   806e8:	d905      	bls.n	806f6 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   806ea:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   806ec:	280b      	cmp	r0, #11
   806ee:	d1f3      	bne.n	806d8 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   806f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   806f4:	e005      	b.n	80702 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   806f6:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   806f8:	bf94      	ite	ls
   806fa:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   806fe:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   80702:	b00c      	add	sp, #48	; 0x30
   80704:	bcf0      	pop	{r4, r5, r6, r7}
   80706:	4770      	bx	lr
   80708:	00082980 	.word	0x00082980

0008070c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8070c:	b570      	push	{r4, r5, r6, lr}
   8070e:	4606      	mov	r6, r0
   80710:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   80712:	6808      	ldr	r0, [r1, #0]
   80714:	b140      	cbz	r0, 80728 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80716:	6889      	ldr	r1, [r1, #8]
   80718:	4b0e      	ldr	r3, [pc, #56]	; (80754 <pwm_init+0x48>)
   8071a:	4798      	blx	r3
   8071c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80722:	4298      	cmp	r0, r3
   80724:	d101      	bne.n	8072a <pwm_init+0x1e>
   80726:	e00e      	b.n	80746 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   80728:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   8072a:	6860      	ldr	r0, [r4, #4]
   8072c:	b140      	cbz	r0, 80740 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   8072e:	68a1      	ldr	r1, [r4, #8]
   80730:	4b08      	ldr	r3, [pc, #32]	; (80754 <pwm_init+0x48>)
   80732:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   80734:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80738:	4298      	cmp	r0, r3
   8073a:	d007      	beq.n	8074c <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   8073c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   80740:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   80742:	2000      	movs	r0, #0
   80744:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   80746:	f64f 70ff 	movw	r0, #65535	; 0xffff
   8074a:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   8074c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   80750:	bd70      	pop	{r4, r5, r6, pc}
   80752:	bf00      	nop
   80754:	000806b9 	.word	0x000806b9

00080758 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80758:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8075a:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8075c:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8075e:	684c      	ldr	r4, [r1, #4]
   80760:	f004 040f 	and.w	r4, r4, #15
   80764:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   80766:	890c      	ldrh	r4, [r1, #8]
   80768:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   8076a:	7a8c      	ldrb	r4, [r1, #10]
   8076c:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   80770:	7d8c      	ldrb	r4, [r1, #22]
   80772:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80776:	7dcc      	ldrb	r4, [r1, #23]
   80778:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8077c:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8077e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   80782:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80786:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8078a:	68ca      	ldr	r2, [r1, #12]
   8078c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80790:	690a      	ldr	r2, [r1, #16]
   80792:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80796:	7d8a      	ldrb	r2, [r1, #22]
   80798:	b13a      	cbz	r2, 807aa <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8079a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8079c:	8b4a      	ldrh	r2, [r1, #26]
   8079e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   807a2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   807a6:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   807aa:	6c84      	ldr	r4, [r0, #72]	; 0x48
   807ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   807b0:	409a      	lsls	r2, r3
   807b2:	43d2      	mvns	r2, r2
   807b4:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   807b8:	7fcc      	ldrb	r4, [r1, #31]
   807ba:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   807be:	7f8c      	ldrb	r4, [r1, #30]
   807c0:	409c      	lsls	r4, r3
   807c2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   807c6:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   807c8:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   807ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
   807cc:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   807ce:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   807d2:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   807d6:	f891 2020 	ldrb.w	r2, [r1, #32]
   807da:	409a      	lsls	r2, r3
   807dc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   807e0:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   807e2:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   807e4:	2201      	movs	r2, #1
   807e6:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   807e8:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   807ec:	b11c      	cbz	r4, 807f6 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   807ee:	6a04      	ldr	r4, [r0, #32]
   807f0:	4314      	orrs	r4, r2
   807f2:	6204      	str	r4, [r0, #32]
   807f4:	e003      	b.n	807fe <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   807f6:	6a04      	ldr	r4, [r0, #32]
   807f8:	ea24 0402 	bic.w	r4, r4, r2
   807fc:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   807fe:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80802:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80804:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80806:	bf0c      	ite	eq
   80808:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8080a:	4394      	bicne	r4, r2
   8080c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8080e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80812:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80814:	6e84      	ldr	r4, [r0, #104]	; 0x68
   80816:	bf0c      	ite	eq
   80818:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   8081c:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   80820:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80822:	2b03      	cmp	r3, #3
   80824:	d80b      	bhi.n	8083e <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   80826:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   80828:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   8082a:	22ff      	movs	r2, #255	; 0xff
   8082c:	40aa      	lsls	r2, r5
   8082e:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80832:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   80836:	40ab      	lsls	r3, r5
   80838:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8083a:	66c3      	str	r3, [r0, #108]	; 0x6c
   8083c:	e00c      	b.n	80858 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   8083e:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   80840:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   80842:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   80844:	24ff      	movs	r4, #255	; 0xff
   80846:	409c      	lsls	r4, r3
   80848:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8084c:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80850:	fa02 f303 	lsl.w	r3, r2, r3
   80854:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80856:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80858:	2000      	movs	r0, #0
   8085a:	bc70      	pop	{r4, r5, r6}
   8085c:	4770      	bx	lr
   8085e:	bf00      	nop

00080860 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80860:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   80862:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   80864:	690b      	ldr	r3, [r1, #16]
   80866:	4293      	cmp	r3, r2
   80868:	d306      	bcc.n	80878 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   8086a:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   8086c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80870:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   80874:	2000      	movs	r0, #0
   80876:	e001      	b.n	8087c <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80878:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8087c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80880:	4770      	bx	lr
   80882:	bf00      	nop

00080884 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   80884:	2301      	movs	r3, #1
   80886:	408b      	lsls	r3, r1
   80888:	6043      	str	r3, [r0, #4]
   8088a:	4770      	bx	lr

0008088c <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   8088c:	2301      	movs	r3, #1
   8088e:	408b      	lsls	r3, r1
   80890:	6083      	str	r3, [r0, #8]
   80892:	4770      	bx	lr

00080894 <pwm_channel_get_interrupt_status>:
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
   80894:	69c0      	ldr	r0, [r0, #28]
#endif
}
   80896:	4770      	bx	lr

00080898 <pwm_channel_enable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
   80898:	3210      	adds	r2, #16
   8089a:	2301      	movs	r3, #1
   8089c:	fa03 f202 	lsl.w	r2, r3, r2
   808a0:	408b      	lsls	r3, r1
   808a2:	4313      	orrs	r3, r2
   808a4:	6103      	str	r3, [r0, #16]
   808a6:	4770      	bx	lr

000808a8 <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
   808a8:	3210      	adds	r2, #16
   808aa:	2301      	movs	r3, #1
   808ac:	fa03 f202 	lsl.w	r2, r3, r2
   808b0:	408b      	lsls	r3, r1
   808b2:	4313      	orrs	r3, r2
   808b4:	6143      	str	r3, [r0, #20]
   808b6:	4770      	bx	lr

000808b8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   808b8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   808ba:	23ac      	movs	r3, #172	; 0xac
   808bc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   808be:	680b      	ldr	r3, [r1, #0]
   808c0:	684a      	ldr	r2, [r1, #4]
   808c2:	fbb3 f3f2 	udiv	r3, r3, r2
   808c6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   808c8:	1e5c      	subs	r4, r3, #1
   808ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   808ce:	4294      	cmp	r4, r2
   808d0:	d80a      	bhi.n	808e8 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   808d2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   808d4:	688b      	ldr	r3, [r1, #8]
   808d6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808d8:	f240 2302 	movw	r3, #514	; 0x202
   808dc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808e0:	2350      	movs	r3, #80	; 0x50
   808e2:	6003      	str	r3, [r0, #0]

	return 0;
   808e4:	2000      	movs	r0, #0
   808e6:	e000      	b.n	808ea <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   808e8:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   808ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   808ee:	4770      	bx	lr

000808f0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808f0:	6943      	ldr	r3, [r0, #20]
   808f2:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808f6:	bf1a      	itte	ne
   808f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   808fa:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   808fc:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   808fe:	4770      	bx	lr

00080900 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80900:	6943      	ldr	r3, [r0, #20]
   80902:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80906:	bf1d      	ittte	ne
   80908:	6983      	ldrne	r3, [r0, #24]
   8090a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8090c:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   8090e:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80910:	4770      	bx	lr
   80912:	bf00      	nop

00080914 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80914:	6943      	ldr	r3, [r0, #20]
   80916:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8091a:	bf1d      	ittte	ne
   8091c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80920:	61c1      	strne	r1, [r0, #28]
	return 0;
   80922:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80924:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   80926:	4770      	bx	lr

00080928 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80928:	6943      	ldr	r3, [r0, #20]
   8092a:	f013 0f01 	tst.w	r3, #1
   8092e:	d005      	beq.n	8093c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80930:	6983      	ldr	r3, [r0, #24]
   80932:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80936:	600b      	str	r3, [r1, #0]

	return 0;
   80938:	2000      	movs	r0, #0
   8093a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   8093c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8093e:	4770      	bx	lr

00080940 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80940:	e7fe      	b.n	80940 <Dummy_Handler>
   80942:	bf00      	nop

00080944 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80944:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80946:	4b1f      	ldr	r3, [pc, #124]	; (809c4 <Reset_Handler+0x80>)
   80948:	4a1f      	ldr	r2, [pc, #124]	; (809c8 <Reset_Handler+0x84>)
   8094a:	429a      	cmp	r2, r3
   8094c:	d003      	beq.n	80956 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8094e:	4b1f      	ldr	r3, [pc, #124]	; (809cc <Reset_Handler+0x88>)
   80950:	4a1c      	ldr	r2, [pc, #112]	; (809c4 <Reset_Handler+0x80>)
   80952:	429a      	cmp	r2, r3
   80954:	d304      	bcc.n	80960 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80956:	4b1e      	ldr	r3, [pc, #120]	; (809d0 <Reset_Handler+0x8c>)
   80958:	4a1e      	ldr	r2, [pc, #120]	; (809d4 <Reset_Handler+0x90>)
   8095a:	429a      	cmp	r2, r3
   8095c:	d310      	bcc.n	80980 <Reset_Handler+0x3c>
   8095e:	e01b      	b.n	80998 <Reset_Handler+0x54>
   80960:	4918      	ldr	r1, [pc, #96]	; (809c4 <Reset_Handler+0x80>)
   80962:	1d0a      	adds	r2, r1, #4
   80964:	4b1c      	ldr	r3, [pc, #112]	; (809d8 <Reset_Handler+0x94>)
   80966:	1a9b      	subs	r3, r3, r2
   80968:	f023 0303 	bic.w	r3, r3, #3
   8096c:	3304      	adds	r3, #4
   8096e:	4a16      	ldr	r2, [pc, #88]	; (809c8 <Reset_Handler+0x84>)
   80970:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80972:	f852 0b04 	ldr.w	r0, [r2], #4
   80976:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8097a:	429a      	cmp	r2, r3
   8097c:	d1f9      	bne.n	80972 <Reset_Handler+0x2e>
   8097e:	e7ea      	b.n	80956 <Reset_Handler+0x12>
   80980:	4b16      	ldr	r3, [pc, #88]	; (809dc <Reset_Handler+0x98>)
   80982:	4a17      	ldr	r2, [pc, #92]	; (809e0 <Reset_Handler+0x9c>)
   80984:	1ad2      	subs	r2, r2, r3
   80986:	f022 0203 	bic.w	r2, r2, #3
   8098a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8098c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8098e:	2100      	movs	r1, #0
   80990:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80994:	4293      	cmp	r3, r2
   80996:	d1fb      	bne.n	80990 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80998:	4b12      	ldr	r3, [pc, #72]	; (809e4 <Reset_Handler+0xa0>)
   8099a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8099e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   809a2:	4911      	ldr	r1, [pc, #68]	; (809e8 <Reset_Handler+0xa4>)
   809a4:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   809a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   809aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   809ae:	d203      	bcs.n	809b8 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   809b0:	688b      	ldr	r3, [r1, #8]
   809b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   809b6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   809b8:	4b0c      	ldr	r3, [pc, #48]	; (809ec <Reset_Handler+0xa8>)
   809ba:	4798      	blx	r3

	/* Branch to main function */
	main();
   809bc:	4b0c      	ldr	r3, [pc, #48]	; (809f0 <Reset_Handler+0xac>)
   809be:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   809c0:	e7fe      	b.n	809c0 <Reset_Handler+0x7c>
   809c2:	bf00      	nop
   809c4:	20070000 	.word	0x20070000
   809c8:	00082a30 	.word	0x00082a30
   809cc:	20070974 	.word	0x20070974
   809d0:	20070a78 	.word	0x20070a78
   809d4:	20070974 	.word	0x20070974
   809d8:	20070977 	.word	0x20070977
   809dc:	20070978 	.word	0x20070978
   809e0:	20070a7b 	.word	0x20070a7b
   809e4:	00080000 	.word	0x00080000
   809e8:	e000ed00 	.word	0xe000ed00
   809ec:	00080e8d 	.word	0x00080e8d
   809f0:	00080d2d 	.word	0x00080d2d

000809f4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   809f4:	4b3e      	ldr	r3, [pc, #248]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   809f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809f8:	f003 0303 	and.w	r3, r3, #3
   809fc:	2b03      	cmp	r3, #3
   809fe:	d85f      	bhi.n	80ac0 <SystemCoreClockUpdate+0xcc>
   80a00:	e8df f003 	tbb	[pc, r3]
   80a04:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a08:	4b3a      	ldr	r3, [pc, #232]	; (80af4 <SystemCoreClockUpdate+0x100>)
   80a0a:	695b      	ldr	r3, [r3, #20]
   80a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80a10:	bf14      	ite	ne
   80a12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80a16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80a1a:	4b37      	ldr	r3, [pc, #220]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a1c:	601a      	str	r2, [r3, #0]
   80a1e:	e04f      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a20:	4b33      	ldr	r3, [pc, #204]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a22:	6a1b      	ldr	r3, [r3, #32]
   80a24:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a28:	d003      	beq.n	80a32 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a2a:	4a34      	ldr	r2, [pc, #208]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a2c:	4b32      	ldr	r3, [pc, #200]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a2e:	601a      	str	r2, [r3, #0]
   80a30:	e046      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a32:	4a33      	ldr	r2, [pc, #204]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a34:	4b30      	ldr	r3, [pc, #192]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a36:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a38:	4b2d      	ldr	r3, [pc, #180]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a3a:	6a1b      	ldr	r3, [r3, #32]
   80a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a40:	2b10      	cmp	r3, #16
   80a42:	d002      	beq.n	80a4a <SystemCoreClockUpdate+0x56>
   80a44:	2b20      	cmp	r3, #32
   80a46:	d004      	beq.n	80a52 <SystemCoreClockUpdate+0x5e>
   80a48:	e03a      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a4a:	4a2e      	ldr	r2, [pc, #184]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a4c:	4b2a      	ldr	r3, [pc, #168]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a4e:	601a      	str	r2, [r3, #0]
				break;
   80a50:	e036      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a52:	4a2a      	ldr	r2, [pc, #168]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a54:	4b28      	ldr	r3, [pc, #160]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a56:	601a      	str	r2, [r3, #0]
				break;
   80a58:	e032      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80a5a:	4b25      	ldr	r3, [pc, #148]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a5c:	6a1b      	ldr	r3, [r3, #32]
   80a5e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80a62:	d003      	beq.n	80a6c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80a64:	4a25      	ldr	r2, [pc, #148]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a66:	4b24      	ldr	r3, [pc, #144]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a68:	601a      	str	r2, [r3, #0]
   80a6a:	e012      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80a6c:	4a24      	ldr	r2, [pc, #144]	; (80b00 <SystemCoreClockUpdate+0x10c>)
   80a6e:	4b22      	ldr	r3, [pc, #136]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a70:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80a72:	4b1f      	ldr	r3, [pc, #124]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a74:	6a1b      	ldr	r3, [r3, #32]
   80a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80a7a:	2b10      	cmp	r3, #16
   80a7c:	d002      	beq.n	80a84 <SystemCoreClockUpdate+0x90>
   80a7e:	2b20      	cmp	r3, #32
   80a80:	d004      	beq.n	80a8c <SystemCoreClockUpdate+0x98>
   80a82:	e006      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80a84:	4a1f      	ldr	r2, [pc, #124]	; (80b04 <SystemCoreClockUpdate+0x110>)
   80a86:	4b1c      	ldr	r3, [pc, #112]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a88:	601a      	str	r2, [r3, #0]
				break;
   80a8a:	e002      	b.n	80a92 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80a8c:	4a1b      	ldr	r2, [pc, #108]	; (80afc <SystemCoreClockUpdate+0x108>)
   80a8e:	4b1a      	ldr	r3, [pc, #104]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80a90:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80a92:	4b17      	ldr	r3, [pc, #92]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a96:	f003 0303 	and.w	r3, r3, #3
   80a9a:	2b02      	cmp	r3, #2
   80a9c:	d10d      	bne.n	80aba <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80a9e:	4a14      	ldr	r2, [pc, #80]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80aa0:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80aa2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80aa4:	4814      	ldr	r0, [pc, #80]	; (80af8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80aa6:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80aaa:	6803      	ldr	r3, [r0, #0]
   80aac:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ab0:	b2d2      	uxtb	r2, r2
   80ab2:	fbb3 f3f2 	udiv	r3, r3, r2
   80ab6:	6003      	str	r3, [r0, #0]
   80ab8:	e002      	b.n	80ac0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80aba:	4a13      	ldr	r2, [pc, #76]	; (80b08 <SystemCoreClockUpdate+0x114>)
   80abc:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80abe:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ac0:	4b0b      	ldr	r3, [pc, #44]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ac8:	2b70      	cmp	r3, #112	; 0x70
   80aca:	d107      	bne.n	80adc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80acc:	4a0a      	ldr	r2, [pc, #40]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ace:	6813      	ldr	r3, [r2, #0]
   80ad0:	490e      	ldr	r1, [pc, #56]	; (80b0c <SystemCoreClockUpdate+0x118>)
   80ad2:	fba1 1303 	umull	r1, r3, r1, r3
   80ad6:	085b      	lsrs	r3, r3, #1
   80ad8:	6013      	str	r3, [r2, #0]
   80ada:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80adc:	4b04      	ldr	r3, [pc, #16]	; (80af0 <SystemCoreClockUpdate+0xfc>)
   80ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ae0:	4905      	ldr	r1, [pc, #20]	; (80af8 <SystemCoreClockUpdate+0x104>)
   80ae2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80ae6:	680b      	ldr	r3, [r1, #0]
   80ae8:	40d3      	lsrs	r3, r2
   80aea:	600b      	str	r3, [r1, #0]
   80aec:	4770      	bx	lr
   80aee:	bf00      	nop
   80af0:	400e0600 	.word	0x400e0600
   80af4:	400e1a10 	.word	0x400e1a10
   80af8:	2007012c 	.word	0x2007012c
   80afc:	00b71b00 	.word	0x00b71b00
   80b00:	003d0900 	.word	0x003d0900
   80b04:	007a1200 	.word	0x007a1200
   80b08:	0e4e1c00 	.word	0x0e4e1c00
   80b0c:	aaaaaaab 	.word	0xaaaaaaab

00080b10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b10:	4b09      	ldr	r3, [pc, #36]	; (80b38 <_sbrk+0x28>)
   80b12:	681b      	ldr	r3, [r3, #0]
   80b14:	b913      	cbnz	r3, 80b1c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80b16:	4a09      	ldr	r2, [pc, #36]	; (80b3c <_sbrk+0x2c>)
   80b18:	4b07      	ldr	r3, [pc, #28]	; (80b38 <_sbrk+0x28>)
   80b1a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80b1c:	4b06      	ldr	r3, [pc, #24]	; (80b38 <_sbrk+0x28>)
   80b1e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80b20:	181a      	adds	r2, r3, r0
   80b22:	4907      	ldr	r1, [pc, #28]	; (80b40 <_sbrk+0x30>)
   80b24:	4291      	cmp	r1, r2
   80b26:	db04      	blt.n	80b32 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80b28:	4610      	mov	r0, r2
   80b2a:	4a03      	ldr	r2, [pc, #12]	; (80b38 <_sbrk+0x28>)
   80b2c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80b2e:	4618      	mov	r0, r3
   80b30:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80b32:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80b36:	4770      	bx	lr
   80b38:	20070a00 	.word	0x20070a00
   80b3c:	20072a78 	.word	0x20072a78
   80b40:	20087ffc 	.word	0x20087ffc

00080b44 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80b44:	f04f 30ff 	mov.w	r0, #4294967295
   80b48:	4770      	bx	lr
   80b4a:	bf00      	nop

00080b4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80b50:	604b      	str	r3, [r1, #4]

	return 0;
}
   80b52:	2000      	movs	r0, #0
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop

00080b58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80b58:	2001      	movs	r0, #1
   80b5a:	4770      	bx	lr

00080b5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80b5c:	2000      	movs	r0, #0
   80b5e:	4770      	bx	lr

00080b60 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b62:	b083      	sub	sp, #12
   80b64:	4604      	mov	r4, r0
   80b66:	460d      	mov	r5, r1
	uint32_t val = 0;
   80b68:	2300      	movs	r3, #0
   80b6a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80b6c:	4b1f      	ldr	r3, [pc, #124]	; (80bec <usart_serial_getchar+0x8c>)
   80b6e:	4298      	cmp	r0, r3
   80b70:	d107      	bne.n	80b82 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80b72:	461f      	mov	r7, r3
   80b74:	4e1e      	ldr	r6, [pc, #120]	; (80bf0 <usart_serial_getchar+0x90>)
   80b76:	4638      	mov	r0, r7
   80b78:	4629      	mov	r1, r5
   80b7a:	47b0      	blx	r6
   80b7c:	2800      	cmp	r0, #0
   80b7e:	d1fa      	bne.n	80b76 <usart_serial_getchar+0x16>
   80b80:	e019      	b.n	80bb6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80b82:	4b1c      	ldr	r3, [pc, #112]	; (80bf4 <usart_serial_getchar+0x94>)
   80b84:	4298      	cmp	r0, r3
   80b86:	d109      	bne.n	80b9c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80b88:	461f      	mov	r7, r3
   80b8a:	4e1b      	ldr	r6, [pc, #108]	; (80bf8 <usart_serial_getchar+0x98>)
   80b8c:	4638      	mov	r0, r7
   80b8e:	a901      	add	r1, sp, #4
   80b90:	47b0      	blx	r6
   80b92:	2800      	cmp	r0, #0
   80b94:	d1fa      	bne.n	80b8c <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80b96:	9b01      	ldr	r3, [sp, #4]
   80b98:	702b      	strb	r3, [r5, #0]
   80b9a:	e019      	b.n	80bd0 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80b9c:	4b17      	ldr	r3, [pc, #92]	; (80bfc <usart_serial_getchar+0x9c>)
   80b9e:	4298      	cmp	r0, r3
   80ba0:	d109      	bne.n	80bb6 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80ba2:	461e      	mov	r6, r3
   80ba4:	4c14      	ldr	r4, [pc, #80]	; (80bf8 <usart_serial_getchar+0x98>)
   80ba6:	4630      	mov	r0, r6
   80ba8:	a901      	add	r1, sp, #4
   80baa:	47a0      	blx	r4
   80bac:	2800      	cmp	r0, #0
   80bae:	d1fa      	bne.n	80ba6 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80bb0:	9b01      	ldr	r3, [sp, #4]
   80bb2:	702b      	strb	r3, [r5, #0]
   80bb4:	e018      	b.n	80be8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80bb6:	4b12      	ldr	r3, [pc, #72]	; (80c00 <usart_serial_getchar+0xa0>)
   80bb8:	429c      	cmp	r4, r3
   80bba:	d109      	bne.n	80bd0 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80bbc:	461e      	mov	r6, r3
   80bbe:	4c0e      	ldr	r4, [pc, #56]	; (80bf8 <usart_serial_getchar+0x98>)
   80bc0:	4630      	mov	r0, r6
   80bc2:	a901      	add	r1, sp, #4
   80bc4:	47a0      	blx	r4
   80bc6:	2800      	cmp	r0, #0
   80bc8:	d1fa      	bne.n	80bc0 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80bca:	9b01      	ldr	r3, [sp, #4]
   80bcc:	702b      	strb	r3, [r5, #0]
   80bce:	e00b      	b.n	80be8 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80bd0:	4b0c      	ldr	r3, [pc, #48]	; (80c04 <usart_serial_getchar+0xa4>)
   80bd2:	429c      	cmp	r4, r3
   80bd4:	d108      	bne.n	80be8 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80bd6:	461e      	mov	r6, r3
   80bd8:	4c07      	ldr	r4, [pc, #28]	; (80bf8 <usart_serial_getchar+0x98>)
   80bda:	4630      	mov	r0, r6
   80bdc:	a901      	add	r1, sp, #4
   80bde:	47a0      	blx	r4
   80be0:	2800      	cmp	r0, #0
   80be2:	d1fa      	bne.n	80bda <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80be4:	9b01      	ldr	r3, [sp, #4]
   80be6:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80be8:	b003      	add	sp, #12
   80bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80bec:	400e0800 	.word	0x400e0800
   80bf0:	00080901 	.word	0x00080901
   80bf4:	40098000 	.word	0x40098000
   80bf8:	00080929 	.word	0x00080929
   80bfc:	4009c000 	.word	0x4009c000
   80c00:	400a0000 	.word	0x400a0000
   80c04:	400a4000 	.word	0x400a4000

00080c08 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80c08:	b570      	push	{r4, r5, r6, lr}
   80c0a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c0c:	4b1e      	ldr	r3, [pc, #120]	; (80c88 <usart_serial_putchar+0x80>)
   80c0e:	4298      	cmp	r0, r3
   80c10:	d108      	bne.n	80c24 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80c12:	461e      	mov	r6, r3
   80c14:	4d1d      	ldr	r5, [pc, #116]	; (80c8c <usart_serial_putchar+0x84>)
   80c16:	4630      	mov	r0, r6
   80c18:	4621      	mov	r1, r4
   80c1a:	47a8      	blx	r5
   80c1c:	2800      	cmp	r0, #0
   80c1e:	d1fa      	bne.n	80c16 <usart_serial_putchar+0xe>
		return 1;
   80c20:	2001      	movs	r0, #1
   80c22:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c24:	4b1a      	ldr	r3, [pc, #104]	; (80c90 <usart_serial_putchar+0x88>)
   80c26:	4298      	cmp	r0, r3
   80c28:	d108      	bne.n	80c3c <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80c2a:	461e      	mov	r6, r3
   80c2c:	4d19      	ldr	r5, [pc, #100]	; (80c94 <usart_serial_putchar+0x8c>)
   80c2e:	4630      	mov	r0, r6
   80c30:	4621      	mov	r1, r4
   80c32:	47a8      	blx	r5
   80c34:	2800      	cmp	r0, #0
   80c36:	d1fa      	bne.n	80c2e <usart_serial_putchar+0x26>
		return 1;
   80c38:	2001      	movs	r0, #1
   80c3a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c3c:	4b16      	ldr	r3, [pc, #88]	; (80c98 <usart_serial_putchar+0x90>)
   80c3e:	4298      	cmp	r0, r3
   80c40:	d108      	bne.n	80c54 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80c42:	461e      	mov	r6, r3
   80c44:	4d13      	ldr	r5, [pc, #76]	; (80c94 <usart_serial_putchar+0x8c>)
   80c46:	4630      	mov	r0, r6
   80c48:	4621      	mov	r1, r4
   80c4a:	47a8      	blx	r5
   80c4c:	2800      	cmp	r0, #0
   80c4e:	d1fa      	bne.n	80c46 <usart_serial_putchar+0x3e>
		return 1;
   80c50:	2001      	movs	r0, #1
   80c52:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c54:	4b11      	ldr	r3, [pc, #68]	; (80c9c <usart_serial_putchar+0x94>)
   80c56:	4298      	cmp	r0, r3
   80c58:	d108      	bne.n	80c6c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80c5a:	461e      	mov	r6, r3
   80c5c:	4d0d      	ldr	r5, [pc, #52]	; (80c94 <usart_serial_putchar+0x8c>)
   80c5e:	4630      	mov	r0, r6
   80c60:	4621      	mov	r1, r4
   80c62:	47a8      	blx	r5
   80c64:	2800      	cmp	r0, #0
   80c66:	d1fa      	bne.n	80c5e <usart_serial_putchar+0x56>
		return 1;
   80c68:	2001      	movs	r0, #1
   80c6a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c6c:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <usart_serial_putchar+0x98>)
   80c6e:	4298      	cmp	r0, r3
   80c70:	d108      	bne.n	80c84 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80c72:	461e      	mov	r6, r3
   80c74:	4d07      	ldr	r5, [pc, #28]	; (80c94 <usart_serial_putchar+0x8c>)
   80c76:	4630      	mov	r0, r6
   80c78:	4621      	mov	r1, r4
   80c7a:	47a8      	blx	r5
   80c7c:	2800      	cmp	r0, #0
   80c7e:	d1fa      	bne.n	80c76 <usart_serial_putchar+0x6e>
		return 1;
   80c80:	2001      	movs	r0, #1
   80c82:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80c84:	2000      	movs	r0, #0
}
   80c86:	bd70      	pop	{r4, r5, r6, pc}
   80c88:	400e0800 	.word	0x400e0800
   80c8c:	000808f1 	.word	0x000808f1
   80c90:	40098000 	.word	0x40098000
   80c94:	00080915 	.word	0x00080915
   80c98:	4009c000 	.word	0x4009c000
   80c9c:	400a0000 	.word	0x400a0000
   80ca0:	400a4000 	.word	0x400a4000

00080ca4 <PWM_Handler>:
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
void PWM0_Handler(void)
#else
void PWM_Handler(void)
#endif
{
   80ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t fade_in = 1;  /* LED fade in flag */

#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	uint32_t events = pwm_channel_get_interrupt_status(PWM0);
#else
	uint32_t events = pwm_channel_get_interrupt_status(PWM);
   80ca6:	481a      	ldr	r0, [pc, #104]	; (80d10 <PWM_Handler+0x6c>)
   80ca8:	4b1a      	ldr	r3, [pc, #104]	; (80d14 <PWM_Handler+0x70>)
   80caa:	4798      	blx	r3
#endif

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
   80cac:	f010 0f10 	tst.w	r0, #16
   80cb0:	d02d      	beq.n	80d0e <PWM_Handler+0x6a>
	(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
   80cb2:	4a19      	ldr	r2, [pc, #100]	; (80d18 <PWM_Handler+0x74>)
   80cb4:	6813      	ldr	r3, [r2, #0]
   80cb6:	3301      	adds	r3, #1
   80cb8:	6013      	str	r3, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
   80cba:	2b0a      	cmp	r3, #10
   80cbc:	d127      	bne.n	80d0e <PWM_Handler+0x6a>
			/* Fade in */
			if (fade_in) {
   80cbe:	4b17      	ldr	r3, [pc, #92]	; (80d1c <PWM_Handler+0x78>)
   80cc0:	781b      	ldrb	r3, [r3, #0]
   80cc2:	b14b      	cbz	r3, 80cd8 <PWM_Handler+0x34>
				ul_duty++;
   80cc4:	4a16      	ldr	r2, [pc, #88]	; (80d20 <PWM_Handler+0x7c>)
   80cc6:	6813      	ldr	r3, [r2, #0]
   80cc8:	3301      	adds	r3, #1
   80cca:	6013      	str	r3, [r2, #0]
				if (ul_duty == PERIOD_VALUE) {
   80ccc:	2b64      	cmp	r3, #100	; 0x64
   80cce:	d10b      	bne.n	80ce8 <PWM_Handler+0x44>
					fade_in = 0;
   80cd0:	2200      	movs	r2, #0
   80cd2:	4b12      	ldr	r3, [pc, #72]	; (80d1c <PWM_Handler+0x78>)
   80cd4:	701a      	strb	r2, [r3, #0]
   80cd6:	e007      	b.n	80ce8 <PWM_Handler+0x44>
				}
				} else {
				/* Fade out */
				ul_duty--;
   80cd8:	4a11      	ldr	r2, [pc, #68]	; (80d20 <PWM_Handler+0x7c>)
   80cda:	6813      	ldr	r3, [r2, #0]
   80cdc:	3b01      	subs	r3, #1
   80cde:	6013      	str	r3, [r2, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
   80ce0:	b913      	cbnz	r3, 80ce8 <PWM_Handler+0x44>
					fade_in = 1;
   80ce2:	2201      	movs	r2, #1
   80ce4:	4b0d      	ldr	r3, [pc, #52]	; (80d1c <PWM_Handler+0x78>)
   80ce6:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
   80ce8:	2200      	movs	r2, #0
   80cea:	4b0b      	ldr	r3, [pc, #44]	; (80d18 <PWM_Handler+0x74>)
   80cec:	601a      	str	r2, [r3, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
   80cee:	4c0d      	ldr	r4, [pc, #52]	; (80d24 <PWM_Handler+0x80>)
   80cf0:	2304      	movs	r3, #4
   80cf2:	6023      	str	r3, [r4, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
#else
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
   80cf4:	4f06      	ldr	r7, [pc, #24]	; (80d10 <PWM_Handler+0x6c>)
   80cf6:	4e0a      	ldr	r6, [pc, #40]	; (80d20 <PWM_Handler+0x7c>)
   80cf8:	4638      	mov	r0, r7
   80cfa:	4621      	mov	r1, r4
   80cfc:	6832      	ldr	r2, [r6, #0]
   80cfe:	4d0a      	ldr	r5, [pc, #40]	; (80d28 <PWM_Handler+0x84>)
   80d00:	47a8      	blx	r5
#endif
			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
   80d02:	2305      	movs	r3, #5
   80d04:	6023      	str	r3, [r4, #0]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, ul_duty);
#else
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
   80d06:	4638      	mov	r0, r7
   80d08:	4621      	mov	r1, r4
   80d0a:	6832      	ldr	r2, [r6, #0]
   80d0c:	47a8      	blx	r5
   80d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d10:	40094000 	.word	0x40094000
   80d14:	00080895 	.word	0x00080895
   80d18:	20070a08 	.word	0x20070a08
   80d1c:	20070130 	.word	0x20070130
   80d20:	20070a04 	.word	0x20070a04
   80d24:	20070a4c 	.word	0x20070a4c
   80d28:	00080861 	.word	0x00080861

00080d2c <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80d30:	b086      	sub	sp, #24
	/* Initialize the SAM system */
	sysclk_init();
   80d32:	4b3d      	ldr	r3, [pc, #244]	; (80e28 <main+0xfc>)
   80d34:	4798      	blx	r3
	board_init();
   80d36:	4b3d      	ldr	r3, [pc, #244]	; (80e2c <main+0x100>)
   80d38:	4798      	blx	r3
   80d3a:	2008      	movs	r0, #8
   80d3c:	4c3c      	ldr	r4, [pc, #240]	; (80e30 <main+0x104>)
   80d3e:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80d40:	4d3c      	ldr	r5, [pc, #240]	; (80e34 <main+0x108>)
   80d42:	4b3d      	ldr	r3, [pc, #244]	; (80e38 <main+0x10c>)
   80d44:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80d46:	4a3d      	ldr	r2, [pc, #244]	; (80e3c <main+0x110>)
   80d48:	4b3d      	ldr	r3, [pc, #244]	; (80e40 <main+0x114>)
   80d4a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80d4c:	4a3d      	ldr	r2, [pc, #244]	; (80e44 <main+0x118>)
   80d4e:	4b3e      	ldr	r3, [pc, #248]	; (80e48 <main+0x11c>)
   80d50:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80d52:	4f3e      	ldr	r7, [pc, #248]	; (80e4c <main+0x120>)
   80d54:	9700      	str	r7, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   80d56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80d5a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   80d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d60:	9302      	str	r3, [sp, #8]
   80d62:	2008      	movs	r0, #8
   80d64:	47a0      	blx	r4
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80d66:	4628      	mov	r0, r5
   80d68:	4669      	mov	r1, sp
   80d6a:	4b39      	ldr	r3, [pc, #228]	; (80e50 <main+0x124>)
   80d6c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80d6e:	4e39      	ldr	r6, [pc, #228]	; (80e54 <main+0x128>)
   80d70:	6833      	ldr	r3, [r6, #0]
   80d72:	6898      	ldr	r0, [r3, #8]
   80d74:	2100      	movs	r1, #0
   80d76:	4d38      	ldr	r5, [pc, #224]	; (80e58 <main+0x12c>)
   80d78:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80d7a:	6833      	ldr	r3, [r6, #0]
   80d7c:	6858      	ldr	r0, [r3, #4]
   80d7e:	2100      	movs	r1, #0
   80d80:	47a8      	blx	r5

	/* Configure the console uart for debug information */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
   80d82:	4836      	ldr	r0, [pc, #216]	; (80e5c <main+0x130>)
   80d84:	4b36      	ldr	r3, [pc, #216]	; (80e60 <main+0x134>)
   80d86:	4798      	blx	r3
	
	/* Enable PWM peripheral clock */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pmc_enable_periph_clk(ID_PWM0);
#else
	pmc_enable_periph_clk(ID_PWM);
   80d88:	2024      	movs	r0, #36	; 0x24
   80d8a:	47a0      	blx	r4
	/* Disable PWM channels for LEDs */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
	pwm_channel_disable(PWM0, PIN_PWM_LED1_CHANNEL);
#else
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
   80d8c:	4d35      	ldr	r5, [pc, #212]	; (80e64 <main+0x138>)
   80d8e:	4628      	mov	r0, r5
   80d90:	2104      	movs	r1, #4
   80d92:	4c35      	ldr	r4, [pc, #212]	; (80e68 <main+0x13c>)
   80d94:	47a0      	blx	r4
	pwm_channel_disable(PWM, PIN_PWM_LED1_CHANNEL);
   80d96:	4628      	mov	r0, r5
   80d98:	2105      	movs	r1, #5
   80d9a:	47a0      	blx	r4
#endif

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
   80d9c:	4b33      	ldr	r3, [pc, #204]	; (80e6c <main+0x140>)
   80d9e:	9303      	str	r3, [sp, #12]
   80da0:	2600      	movs	r6, #0
   80da2:	9604      	str	r6, [sp, #16]
   80da4:	9705      	str	r7, [sp, #20]
		.ul_mck = sysclk_get_cpu_hz()
	};
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_init(PWM0, &clock_setting);
#else
	pwm_init(PWM, &clock_setting);
   80da6:	4628      	mov	r0, r5
   80da8:	a903      	add	r1, sp, #12
   80daa:	4b31      	ldr	r3, [pc, #196]	; (80e70 <main+0x144>)
   80dac:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
   80dae:	4c31      	ldr	r4, [pc, #196]	; (80e74 <main+0x148>)
   80db0:	8126      	strh	r6, [r4, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
   80db2:	72a6      	strb	r6, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80db4:	f04f 0a0b 	mov.w	sl, #11
   80db8:	f8c4 a004 	str.w	sl, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
   80dbc:	2764      	movs	r7, #100	; 0x64
   80dbe:	6127      	str	r7, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
   80dc0:	60e6      	str	r6, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
   80dc2:	f04f 0804 	mov.w	r8, #4
   80dc6:	f8c4 8000 	str.w	r8, [r4]
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_init(PWM0, &g_pwm_channel_led);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
   80dca:	4628      	mov	r0, r5
   80dcc:	4621      	mov	r1, r4
   80dce:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80e88 <main+0x15c>
   80dd2:	47c8      	blx	r9

	/* Enable channel counter event interrupt */
#if (SAMV70 || SAMV71 || SAME70 || SAMS70)
	pwm_channel_enable_interrupt(PWM0, PIN_PWM_LED0_CHANNEL, 0);
#else
	pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);
   80dd4:	4628      	mov	r0, r5
   80dd6:	4641      	mov	r1, r8
   80dd8:	4632      	mov	r2, r6
   80dda:	4b27      	ldr	r3, [pc, #156]	; (80e78 <main+0x14c>)
   80ddc:	4798      	blx	r3
#endif

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
   80dde:	f44f 7380 	mov.w	r3, #256	; 0x100
   80de2:	8123      	strh	r3, [r4, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
   80de4:	2301      	movs	r3, #1
   80de6:	72a3      	strb	r3, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80de8:	f8c4 a004 	str.w	sl, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
   80dec:	6127      	str	r7, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
   80dee:	60e6      	str	r6, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
   80df0:	2705      	movs	r7, #5
   80df2:	6027      	str	r7, [r4, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM0, PIN_PWM_LED1_CHANNEL, 0);
#else
	pwm_channel_init(PWM, &g_pwm_channel_led);
   80df4:	4628      	mov	r0, r5
   80df6:	4621      	mov	r1, r4
   80df8:	47c8      	blx	r9

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_PWM_LED1_CHANNEL, 0);
   80dfa:	4628      	mov	r0, r5
   80dfc:	4639      	mov	r1, r7
   80dfe:	4632      	mov	r2, r6
   80e00:	4b1e      	ldr	r3, [pc, #120]	; (80e7c <main+0x150>)
   80e02:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80e04:	4b1e      	ldr	r3, [pc, #120]	; (80e80 <main+0x154>)
   80e06:	2210      	movs	r2, #16
   80e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80e0c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80e10:	f883 6324 	strb.w	r6, [r3, #804]	; 0x324

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80e14:	605a      	str	r2, [r3, #4]
	NVIC_ClearPendingIRQ(PWM_IRQn);
	NVIC_SetPriority(PWM_IRQn, 0);
	NVIC_EnableIRQ(PWM_IRQn);
	
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_PWM_LED0_CHANNEL);
   80e16:	4628      	mov	r0, r5
   80e18:	4641      	mov	r1, r8
   80e1a:	4c1a      	ldr	r4, [pc, #104]	; (80e84 <main+0x158>)
   80e1c:	47a0      	blx	r4
	pwm_channel_enable(PWM, PIN_PWM_LED1_CHANNEL);
   80e1e:	4628      	mov	r0, r5
   80e20:	4639      	mov	r1, r7
   80e22:	47a0      	blx	r4
#endif


	/* Infinite loop */
	while (1) {
	}
   80e24:	e7fe      	b.n	80e24 <main+0xf8>
   80e26:	bf00      	nop
   80e28:	00080151 	.word	0x00080151
   80e2c:	00080241 	.word	0x00080241
   80e30:	00080665 	.word	0x00080665
   80e34:	400e0800 	.word	0x400e0800
   80e38:	20070a48 	.word	0x20070a48
   80e3c:	00080c09 	.word	0x00080c09
   80e40:	20070a44 	.word	0x20070a44
   80e44:	00080b61 	.word	0x00080b61
   80e48:	20070a40 	.word	0x20070a40
   80e4c:	0501bd00 	.word	0x0501bd00
   80e50:	000808b9 	.word	0x000808b9
   80e54:	20070560 	.word	0x20070560
   80e58:	00080fe9 	.word	0x00080fe9
   80e5c:	000829ac 	.word	0x000829ac
   80e60:	00080fd9 	.word	0x00080fd9
   80e64:	40094000 	.word	0x40094000
   80e68:	0008088d 	.word	0x0008088d
   80e6c:	000186a0 	.word	0x000186a0
   80e70:	0008070d 	.word	0x0008070d
   80e74:	20070a4c 	.word	0x20070a4c
   80e78:	00080899 	.word	0x00080899
   80e7c:	000808a9 	.word	0x000808a9
   80e80:	e000e100 	.word	0xe000e100
   80e84:	00080885 	.word	0x00080885
   80e88:	00080759 	.word	0x00080759

00080e8c <__libc_init_array>:
   80e8c:	b570      	push	{r4, r5, r6, lr}
   80e8e:	4e0f      	ldr	r6, [pc, #60]	; (80ecc <__libc_init_array+0x40>)
   80e90:	4d0f      	ldr	r5, [pc, #60]	; (80ed0 <__libc_init_array+0x44>)
   80e92:	1b76      	subs	r6, r6, r5
   80e94:	10b6      	asrs	r6, r6, #2
   80e96:	bf18      	it	ne
   80e98:	2400      	movne	r4, #0
   80e9a:	d005      	beq.n	80ea8 <__libc_init_array+0x1c>
   80e9c:	3401      	adds	r4, #1
   80e9e:	f855 3b04 	ldr.w	r3, [r5], #4
   80ea2:	4798      	blx	r3
   80ea4:	42a6      	cmp	r6, r4
   80ea6:	d1f9      	bne.n	80e9c <__libc_init_array+0x10>
   80ea8:	4e0a      	ldr	r6, [pc, #40]	; (80ed4 <__libc_init_array+0x48>)
   80eaa:	4d0b      	ldr	r5, [pc, #44]	; (80ed8 <__libc_init_array+0x4c>)
   80eac:	f001 fdae 	bl	82a0c <_init>
   80eb0:	1b76      	subs	r6, r6, r5
   80eb2:	10b6      	asrs	r6, r6, #2
   80eb4:	bf18      	it	ne
   80eb6:	2400      	movne	r4, #0
   80eb8:	d006      	beq.n	80ec8 <__libc_init_array+0x3c>
   80eba:	3401      	adds	r4, #1
   80ebc:	f855 3b04 	ldr.w	r3, [r5], #4
   80ec0:	4798      	blx	r3
   80ec2:	42a6      	cmp	r6, r4
   80ec4:	d1f9      	bne.n	80eba <__libc_init_array+0x2e>
   80ec6:	bd70      	pop	{r4, r5, r6, pc}
   80ec8:	bd70      	pop	{r4, r5, r6, pc}
   80eca:	bf00      	nop
   80ecc:	00082a18 	.word	0x00082a18
   80ed0:	00082a18 	.word	0x00082a18
   80ed4:	00082a20 	.word	0x00082a20
   80ed8:	00082a18 	.word	0x00082a18

00080edc <memset>:
   80edc:	b470      	push	{r4, r5, r6}
   80ede:	0784      	lsls	r4, r0, #30
   80ee0:	d046      	beq.n	80f70 <memset+0x94>
   80ee2:	1e54      	subs	r4, r2, #1
   80ee4:	2a00      	cmp	r2, #0
   80ee6:	d041      	beq.n	80f6c <memset+0x90>
   80ee8:	b2cd      	uxtb	r5, r1
   80eea:	4603      	mov	r3, r0
   80eec:	e002      	b.n	80ef4 <memset+0x18>
   80eee:	1e62      	subs	r2, r4, #1
   80ef0:	b3e4      	cbz	r4, 80f6c <memset+0x90>
   80ef2:	4614      	mov	r4, r2
   80ef4:	f803 5b01 	strb.w	r5, [r3], #1
   80ef8:	079a      	lsls	r2, r3, #30
   80efa:	d1f8      	bne.n	80eee <memset+0x12>
   80efc:	2c03      	cmp	r4, #3
   80efe:	d92e      	bls.n	80f5e <memset+0x82>
   80f00:	b2cd      	uxtb	r5, r1
   80f02:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f06:	2c0f      	cmp	r4, #15
   80f08:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f0c:	d919      	bls.n	80f42 <memset+0x66>
   80f0e:	4626      	mov	r6, r4
   80f10:	f103 0210 	add.w	r2, r3, #16
   80f14:	3e10      	subs	r6, #16
   80f16:	2e0f      	cmp	r6, #15
   80f18:	f842 5c10 	str.w	r5, [r2, #-16]
   80f1c:	f842 5c0c 	str.w	r5, [r2, #-12]
   80f20:	f842 5c08 	str.w	r5, [r2, #-8]
   80f24:	f842 5c04 	str.w	r5, [r2, #-4]
   80f28:	f102 0210 	add.w	r2, r2, #16
   80f2c:	d8f2      	bhi.n	80f14 <memset+0x38>
   80f2e:	f1a4 0210 	sub.w	r2, r4, #16
   80f32:	f022 020f 	bic.w	r2, r2, #15
   80f36:	f004 040f 	and.w	r4, r4, #15
   80f3a:	3210      	adds	r2, #16
   80f3c:	2c03      	cmp	r4, #3
   80f3e:	4413      	add	r3, r2
   80f40:	d90d      	bls.n	80f5e <memset+0x82>
   80f42:	461e      	mov	r6, r3
   80f44:	4622      	mov	r2, r4
   80f46:	3a04      	subs	r2, #4
   80f48:	2a03      	cmp	r2, #3
   80f4a:	f846 5b04 	str.w	r5, [r6], #4
   80f4e:	d8fa      	bhi.n	80f46 <memset+0x6a>
   80f50:	1f22      	subs	r2, r4, #4
   80f52:	f022 0203 	bic.w	r2, r2, #3
   80f56:	3204      	adds	r2, #4
   80f58:	4413      	add	r3, r2
   80f5a:	f004 0403 	and.w	r4, r4, #3
   80f5e:	b12c      	cbz	r4, 80f6c <memset+0x90>
   80f60:	b2c9      	uxtb	r1, r1
   80f62:	441c      	add	r4, r3
   80f64:	f803 1b01 	strb.w	r1, [r3], #1
   80f68:	42a3      	cmp	r3, r4
   80f6a:	d1fb      	bne.n	80f64 <memset+0x88>
   80f6c:	bc70      	pop	{r4, r5, r6}
   80f6e:	4770      	bx	lr
   80f70:	4614      	mov	r4, r2
   80f72:	4603      	mov	r3, r0
   80f74:	e7c2      	b.n	80efc <memset+0x20>
   80f76:	bf00      	nop

00080f78 <_puts_r>:
   80f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f7a:	4604      	mov	r4, r0
   80f7c:	b089      	sub	sp, #36	; 0x24
   80f7e:	4608      	mov	r0, r1
   80f80:	460d      	mov	r5, r1
   80f82:	f000 f8b5 	bl	810f0 <strlen>
   80f86:	68a3      	ldr	r3, [r4, #8]
   80f88:	2102      	movs	r1, #2
   80f8a:	899a      	ldrh	r2, [r3, #12]
   80f8c:	f8df e044 	ldr.w	lr, [pc, #68]	; 80fd4 <_puts_r+0x5c>
   80f90:	f100 0c01 	add.w	ip, r0, #1
   80f94:	2701      	movs	r7, #1
   80f96:	ae04      	add	r6, sp, #16
   80f98:	9102      	str	r1, [sp, #8]
   80f9a:	0491      	lsls	r1, r2, #18
   80f9c:	9504      	str	r5, [sp, #16]
   80f9e:	9005      	str	r0, [sp, #20]
   80fa0:	f8cd c00c 	str.w	ip, [sp, #12]
   80fa4:	f8cd e018 	str.w	lr, [sp, #24]
   80fa8:	9707      	str	r7, [sp, #28]
   80faa:	9601      	str	r6, [sp, #4]
   80fac:	d406      	bmi.n	80fbc <_puts_r+0x44>
   80fae:	6e59      	ldr	r1, [r3, #100]	; 0x64
   80fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80fb4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   80fb8:	819a      	strh	r2, [r3, #12]
   80fba:	6659      	str	r1, [r3, #100]	; 0x64
   80fbc:	4620      	mov	r0, r4
   80fbe:	4619      	mov	r1, r3
   80fc0:	aa01      	add	r2, sp, #4
   80fc2:	f000 fbb3 	bl	8172c <__sfvwrite_r>
   80fc6:	2800      	cmp	r0, #0
   80fc8:	bf14      	ite	ne
   80fca:	f04f 30ff 	movne.w	r0, #4294967295
   80fce:	200a      	moveq	r0, #10
   80fd0:	b009      	add	sp, #36	; 0x24
   80fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80fd4:	00082a08 	.word	0x00082a08

00080fd8 <puts>:
   80fd8:	4b02      	ldr	r3, [pc, #8]	; (80fe4 <puts+0xc>)
   80fda:	4601      	mov	r1, r0
   80fdc:	6818      	ldr	r0, [r3, #0]
   80fde:	f7ff bfcb 	b.w	80f78 <_puts_r>
   80fe2:	bf00      	nop
   80fe4:	20070560 	.word	0x20070560

00080fe8 <setbuf>:
   80fe8:	2900      	cmp	r1, #0
   80fea:	bf0c      	ite	eq
   80fec:	2202      	moveq	r2, #2
   80fee:	2200      	movne	r2, #0
   80ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80ff4:	f000 b800 	b.w	80ff8 <setvbuf>

00080ff8 <setvbuf>:
   80ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ffc:	4d3a      	ldr	r5, [pc, #232]	; (810e8 <setvbuf+0xf0>)
   80ffe:	4604      	mov	r4, r0
   81000:	682e      	ldr	r6, [r5, #0]
   81002:	4690      	mov	r8, r2
   81004:	460d      	mov	r5, r1
   81006:	461f      	mov	r7, r3
   81008:	b116      	cbz	r6, 81010 <setvbuf+0x18>
   8100a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   8100c:	2b00      	cmp	r3, #0
   8100e:	d03c      	beq.n	8108a <setvbuf+0x92>
   81010:	f1b8 0f02 	cmp.w	r8, #2
   81014:	d82f      	bhi.n	81076 <setvbuf+0x7e>
   81016:	2f00      	cmp	r7, #0
   81018:	db2d      	blt.n	81076 <setvbuf+0x7e>
   8101a:	4621      	mov	r1, r4
   8101c:	4630      	mov	r0, r6
   8101e:	f000 f9ab 	bl	81378 <_fflush_r>
   81022:	89a1      	ldrh	r1, [r4, #12]
   81024:	2300      	movs	r3, #0
   81026:	6063      	str	r3, [r4, #4]
   81028:	61a3      	str	r3, [r4, #24]
   8102a:	060b      	lsls	r3, r1, #24
   8102c:	d427      	bmi.n	8107e <setvbuf+0x86>
   8102e:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   81032:	b289      	uxth	r1, r1
   81034:	f1b8 0f02 	cmp.w	r8, #2
   81038:	81a1      	strh	r1, [r4, #12]
   8103a:	d02a      	beq.n	81092 <setvbuf+0x9a>
   8103c:	2d00      	cmp	r5, #0
   8103e:	d036      	beq.n	810ae <setvbuf+0xb6>
   81040:	f1b8 0f01 	cmp.w	r8, #1
   81044:	d011      	beq.n	8106a <setvbuf+0x72>
   81046:	b289      	uxth	r1, r1
   81048:	f001 0008 	and.w	r0, r1, #8
   8104c:	4b27      	ldr	r3, [pc, #156]	; (810ec <setvbuf+0xf4>)
   8104e:	b280      	uxth	r0, r0
   81050:	63f3      	str	r3, [r6, #60]	; 0x3c
   81052:	6025      	str	r5, [r4, #0]
   81054:	6125      	str	r5, [r4, #16]
   81056:	6167      	str	r7, [r4, #20]
   81058:	b178      	cbz	r0, 8107a <setvbuf+0x82>
   8105a:	f011 0f03 	tst.w	r1, #3
   8105e:	bf18      	it	ne
   81060:	2700      	movne	r7, #0
   81062:	2000      	movs	r0, #0
   81064:	60a7      	str	r7, [r4, #8]
   81066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8106a:	f041 0101 	orr.w	r1, r1, #1
   8106e:	427b      	negs	r3, r7
   81070:	81a1      	strh	r1, [r4, #12]
   81072:	61a3      	str	r3, [r4, #24]
   81074:	e7e7      	b.n	81046 <setvbuf+0x4e>
   81076:	f04f 30ff 	mov.w	r0, #4294967295
   8107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8107e:	6921      	ldr	r1, [r4, #16]
   81080:	4630      	mov	r0, r6
   81082:	f000 fa7b 	bl	8157c <_free_r>
   81086:	89a1      	ldrh	r1, [r4, #12]
   81088:	e7d1      	b.n	8102e <setvbuf+0x36>
   8108a:	4630      	mov	r0, r6
   8108c:	f000 fa08 	bl	814a0 <__sinit>
   81090:	e7be      	b.n	81010 <setvbuf+0x18>
   81092:	2000      	movs	r0, #0
   81094:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81098:	f041 0102 	orr.w	r1, r1, #2
   8109c:	2500      	movs	r5, #0
   8109e:	2201      	movs	r2, #1
   810a0:	81a1      	strh	r1, [r4, #12]
   810a2:	60a5      	str	r5, [r4, #8]
   810a4:	6023      	str	r3, [r4, #0]
   810a6:	6123      	str	r3, [r4, #16]
   810a8:	6162      	str	r2, [r4, #20]
   810aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810ae:	2f00      	cmp	r7, #0
   810b0:	bf08      	it	eq
   810b2:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   810b6:	4638      	mov	r0, r7
   810b8:	f000 fd60 	bl	81b7c <malloc>
   810bc:	4605      	mov	r5, r0
   810be:	b128      	cbz	r0, 810cc <setvbuf+0xd4>
   810c0:	89a1      	ldrh	r1, [r4, #12]
   810c2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   810c6:	b289      	uxth	r1, r1
   810c8:	81a1      	strh	r1, [r4, #12]
   810ca:	e7b9      	b.n	81040 <setvbuf+0x48>
   810cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   810d0:	f000 fd54 	bl	81b7c <malloc>
   810d4:	4605      	mov	r5, r0
   810d6:	b918      	cbnz	r0, 810e0 <setvbuf+0xe8>
   810d8:	89a1      	ldrh	r1, [r4, #12]
   810da:	f04f 30ff 	mov.w	r0, #4294967295
   810de:	e7d9      	b.n	81094 <setvbuf+0x9c>
   810e0:	f44f 6780 	mov.w	r7, #1024	; 0x400
   810e4:	e7ec      	b.n	810c0 <setvbuf+0xc8>
   810e6:	bf00      	nop
   810e8:	20070560 	.word	0x20070560
   810ec:	000813a5 	.word	0x000813a5

000810f0 <strlen>:
   810f0:	f020 0103 	bic.w	r1, r0, #3
   810f4:	f010 0003 	ands.w	r0, r0, #3
   810f8:	f1c0 0000 	rsb	r0, r0, #0
   810fc:	f851 3b04 	ldr.w	r3, [r1], #4
   81100:	f100 0c04 	add.w	ip, r0, #4
   81104:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81108:	f06f 0200 	mvn.w	r2, #0
   8110c:	bf1c      	itt	ne
   8110e:	fa22 f20c 	lsrne.w	r2, r2, ip
   81112:	4313      	orrne	r3, r2
   81114:	f04f 0c01 	mov.w	ip, #1
   81118:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8111c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81120:	eba3 020c 	sub.w	r2, r3, ip
   81124:	ea22 0203 	bic.w	r2, r2, r3
   81128:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8112c:	bf04      	itt	eq
   8112e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81132:	3004      	addeq	r0, #4
   81134:	d0f4      	beq.n	81120 <strlen+0x30>
   81136:	f1c2 0100 	rsb	r1, r2, #0
   8113a:	ea02 0201 	and.w	r2, r2, r1
   8113e:	fab2 f282 	clz	r2, r2
   81142:	f1c2 021f 	rsb	r2, r2, #31
   81146:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8114a:	4770      	bx	lr

0008114c <__swsetup_r>:
   8114c:	b538      	push	{r3, r4, r5, lr}
   8114e:	4b2f      	ldr	r3, [pc, #188]	; (8120c <__swsetup_r+0xc0>)
   81150:	4605      	mov	r5, r0
   81152:	6818      	ldr	r0, [r3, #0]
   81154:	460c      	mov	r4, r1
   81156:	b110      	cbz	r0, 8115e <__swsetup_r+0x12>
   81158:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8115a:	2b00      	cmp	r3, #0
   8115c:	d036      	beq.n	811cc <__swsetup_r+0x80>
   8115e:	89a2      	ldrh	r2, [r4, #12]
   81160:	b293      	uxth	r3, r2
   81162:	0718      	lsls	r0, r3, #28
   81164:	d50c      	bpl.n	81180 <__swsetup_r+0x34>
   81166:	6920      	ldr	r0, [r4, #16]
   81168:	b1a8      	cbz	r0, 81196 <__swsetup_r+0x4a>
   8116a:	f013 0201 	ands.w	r2, r3, #1
   8116e:	d01e      	beq.n	811ae <__swsetup_r+0x62>
   81170:	6963      	ldr	r3, [r4, #20]
   81172:	2200      	movs	r2, #0
   81174:	425b      	negs	r3, r3
   81176:	61a3      	str	r3, [r4, #24]
   81178:	60a2      	str	r2, [r4, #8]
   8117a:	b1f0      	cbz	r0, 811ba <__swsetup_r+0x6e>
   8117c:	2000      	movs	r0, #0
   8117e:	bd38      	pop	{r3, r4, r5, pc}
   81180:	06d9      	lsls	r1, r3, #27
   81182:	d53a      	bpl.n	811fa <__swsetup_r+0xae>
   81184:	0758      	lsls	r0, r3, #29
   81186:	d424      	bmi.n	811d2 <__swsetup_r+0x86>
   81188:	6920      	ldr	r0, [r4, #16]
   8118a:	f042 0308 	orr.w	r3, r2, #8
   8118e:	81a3      	strh	r3, [r4, #12]
   81190:	b29b      	uxth	r3, r3
   81192:	2800      	cmp	r0, #0
   81194:	d1e9      	bne.n	8116a <__swsetup_r+0x1e>
   81196:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8119a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8119e:	d0e4      	beq.n	8116a <__swsetup_r+0x1e>
   811a0:	4628      	mov	r0, r5
   811a2:	4621      	mov	r1, r4
   811a4:	f000 fc7a 	bl	81a9c <__smakebuf_r>
   811a8:	89a3      	ldrh	r3, [r4, #12]
   811aa:	6920      	ldr	r0, [r4, #16]
   811ac:	e7dd      	b.n	8116a <__swsetup_r+0x1e>
   811ae:	0799      	lsls	r1, r3, #30
   811b0:	bf58      	it	pl
   811b2:	6962      	ldrpl	r2, [r4, #20]
   811b4:	60a2      	str	r2, [r4, #8]
   811b6:	2800      	cmp	r0, #0
   811b8:	d1e0      	bne.n	8117c <__swsetup_r+0x30>
   811ba:	89a3      	ldrh	r3, [r4, #12]
   811bc:	061a      	lsls	r2, r3, #24
   811be:	d5de      	bpl.n	8117e <__swsetup_r+0x32>
   811c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   811c4:	81a3      	strh	r3, [r4, #12]
   811c6:	f04f 30ff 	mov.w	r0, #4294967295
   811ca:	bd38      	pop	{r3, r4, r5, pc}
   811cc:	f000 f968 	bl	814a0 <__sinit>
   811d0:	e7c5      	b.n	8115e <__swsetup_r+0x12>
   811d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   811d4:	b149      	cbz	r1, 811ea <__swsetup_r+0x9e>
   811d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   811da:	4299      	cmp	r1, r3
   811dc:	d003      	beq.n	811e6 <__swsetup_r+0x9a>
   811de:	4628      	mov	r0, r5
   811e0:	f000 f9cc 	bl	8157c <_free_r>
   811e4:	89a2      	ldrh	r2, [r4, #12]
   811e6:	2300      	movs	r3, #0
   811e8:	6323      	str	r3, [r4, #48]	; 0x30
   811ea:	6920      	ldr	r0, [r4, #16]
   811ec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   811f0:	2300      	movs	r3, #0
   811f2:	b292      	uxth	r2, r2
   811f4:	e884 0009 	stmia.w	r4, {r0, r3}
   811f8:	e7c7      	b.n	8118a <__swsetup_r+0x3e>
   811fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   811fe:	2309      	movs	r3, #9
   81200:	602b      	str	r3, [r5, #0]
   81202:	f04f 30ff 	mov.w	r0, #4294967295
   81206:	81a2      	strh	r2, [r4, #12]
   81208:	bd38      	pop	{r3, r4, r5, pc}
   8120a:	bf00      	nop
   8120c:	20070560 	.word	0x20070560

00081210 <register_fini>:
   81210:	4b02      	ldr	r3, [pc, #8]	; (8121c <register_fini+0xc>)
   81212:	b113      	cbz	r3, 8121a <register_fini+0xa>
   81214:	4802      	ldr	r0, [pc, #8]	; (81220 <register_fini+0x10>)
   81216:	f000 b805 	b.w	81224 <atexit>
   8121a:	4770      	bx	lr
   8121c:	00000000 	.word	0x00000000
   81220:	000814b5 	.word	0x000814b5

00081224 <atexit>:
   81224:	4601      	mov	r1, r0
   81226:	2000      	movs	r0, #0
   81228:	4602      	mov	r2, r0
   8122a:	4603      	mov	r3, r0
   8122c:	f001 bab4 	b.w	82798 <__register_exitproc>

00081230 <__sflush_r>:
   81230:	898b      	ldrh	r3, [r1, #12]
   81232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81236:	b29a      	uxth	r2, r3
   81238:	460d      	mov	r5, r1
   8123a:	0711      	lsls	r1, r2, #28
   8123c:	4680      	mov	r8, r0
   8123e:	d43c      	bmi.n	812ba <__sflush_r+0x8a>
   81240:	686a      	ldr	r2, [r5, #4]
   81242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81246:	2a00      	cmp	r2, #0
   81248:	81ab      	strh	r3, [r5, #12]
   8124a:	dd65      	ble.n	81318 <__sflush_r+0xe8>
   8124c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8124e:	2e00      	cmp	r6, #0
   81250:	d04b      	beq.n	812ea <__sflush_r+0xba>
   81252:	b29b      	uxth	r3, r3
   81254:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81258:	2100      	movs	r1, #0
   8125a:	b292      	uxth	r2, r2
   8125c:	f8d8 4000 	ldr.w	r4, [r8]
   81260:	f8c8 1000 	str.w	r1, [r8]
   81264:	2a00      	cmp	r2, #0
   81266:	d05b      	beq.n	81320 <__sflush_r+0xf0>
   81268:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8126a:	075f      	lsls	r7, r3, #29
   8126c:	d505      	bpl.n	8127a <__sflush_r+0x4a>
   8126e:	6869      	ldr	r1, [r5, #4]
   81270:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81272:	1a52      	subs	r2, r2, r1
   81274:	b10b      	cbz	r3, 8127a <__sflush_r+0x4a>
   81276:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81278:	1ad2      	subs	r2, r2, r3
   8127a:	4640      	mov	r0, r8
   8127c:	69e9      	ldr	r1, [r5, #28]
   8127e:	2300      	movs	r3, #0
   81280:	47b0      	blx	r6
   81282:	1c46      	adds	r6, r0, #1
   81284:	d056      	beq.n	81334 <__sflush_r+0x104>
   81286:	89ab      	ldrh	r3, [r5, #12]
   81288:	692a      	ldr	r2, [r5, #16]
   8128a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8128e:	b29b      	uxth	r3, r3
   81290:	2100      	movs	r1, #0
   81292:	602a      	str	r2, [r5, #0]
   81294:	04da      	lsls	r2, r3, #19
   81296:	81ab      	strh	r3, [r5, #12]
   81298:	6069      	str	r1, [r5, #4]
   8129a:	d43b      	bmi.n	81314 <__sflush_r+0xe4>
   8129c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8129e:	f8c8 4000 	str.w	r4, [r8]
   812a2:	b311      	cbz	r1, 812ea <__sflush_r+0xba>
   812a4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   812a8:	4299      	cmp	r1, r3
   812aa:	d002      	beq.n	812b2 <__sflush_r+0x82>
   812ac:	4640      	mov	r0, r8
   812ae:	f000 f965 	bl	8157c <_free_r>
   812b2:	2000      	movs	r0, #0
   812b4:	6328      	str	r0, [r5, #48]	; 0x30
   812b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812ba:	692e      	ldr	r6, [r5, #16]
   812bc:	b1ae      	cbz	r6, 812ea <__sflush_r+0xba>
   812be:	0791      	lsls	r1, r2, #30
   812c0:	682c      	ldr	r4, [r5, #0]
   812c2:	bf0c      	ite	eq
   812c4:	696b      	ldreq	r3, [r5, #20]
   812c6:	2300      	movne	r3, #0
   812c8:	602e      	str	r6, [r5, #0]
   812ca:	1ba4      	subs	r4, r4, r6
   812cc:	60ab      	str	r3, [r5, #8]
   812ce:	e00a      	b.n	812e6 <__sflush_r+0xb6>
   812d0:	4632      	mov	r2, r6
   812d2:	4623      	mov	r3, r4
   812d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   812d6:	4640      	mov	r0, r8
   812d8:	69e9      	ldr	r1, [r5, #28]
   812da:	47b8      	blx	r7
   812dc:	2800      	cmp	r0, #0
   812de:	eba4 0400 	sub.w	r4, r4, r0
   812e2:	4406      	add	r6, r0
   812e4:	dd04      	ble.n	812f0 <__sflush_r+0xc0>
   812e6:	2c00      	cmp	r4, #0
   812e8:	dcf2      	bgt.n	812d0 <__sflush_r+0xa0>
   812ea:	2000      	movs	r0, #0
   812ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   812f0:	89ab      	ldrh	r3, [r5, #12]
   812f2:	f04f 30ff 	mov.w	r0, #4294967295
   812f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   812fa:	81ab      	strh	r3, [r5, #12]
   812fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81300:	89ab      	ldrh	r3, [r5, #12]
   81302:	692a      	ldr	r2, [r5, #16]
   81304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81308:	b29b      	uxth	r3, r3
   8130a:	81ab      	strh	r3, [r5, #12]
   8130c:	04db      	lsls	r3, r3, #19
   8130e:	6069      	str	r1, [r5, #4]
   81310:	602a      	str	r2, [r5, #0]
   81312:	d5c3      	bpl.n	8129c <__sflush_r+0x6c>
   81314:	6528      	str	r0, [r5, #80]	; 0x50
   81316:	e7c1      	b.n	8129c <__sflush_r+0x6c>
   81318:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8131a:	2a00      	cmp	r2, #0
   8131c:	dc96      	bgt.n	8124c <__sflush_r+0x1c>
   8131e:	e7e4      	b.n	812ea <__sflush_r+0xba>
   81320:	2301      	movs	r3, #1
   81322:	4640      	mov	r0, r8
   81324:	69e9      	ldr	r1, [r5, #28]
   81326:	47b0      	blx	r6
   81328:	1c43      	adds	r3, r0, #1
   8132a:	4602      	mov	r2, r0
   8132c:	d019      	beq.n	81362 <__sflush_r+0x132>
   8132e:	89ab      	ldrh	r3, [r5, #12]
   81330:	6aae      	ldr	r6, [r5, #40]	; 0x28
   81332:	e79a      	b.n	8126a <__sflush_r+0x3a>
   81334:	f8d8 1000 	ldr.w	r1, [r8]
   81338:	2900      	cmp	r1, #0
   8133a:	d0e1      	beq.n	81300 <__sflush_r+0xd0>
   8133c:	291d      	cmp	r1, #29
   8133e:	d007      	beq.n	81350 <__sflush_r+0x120>
   81340:	2916      	cmp	r1, #22
   81342:	d005      	beq.n	81350 <__sflush_r+0x120>
   81344:	89ab      	ldrh	r3, [r5, #12]
   81346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8134a:	81ab      	strh	r3, [r5, #12]
   8134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81350:	89ab      	ldrh	r3, [r5, #12]
   81352:	6929      	ldr	r1, [r5, #16]
   81354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81358:	2200      	movs	r2, #0
   8135a:	81ab      	strh	r3, [r5, #12]
   8135c:	e885 0006 	stmia.w	r5, {r1, r2}
   81360:	e79c      	b.n	8129c <__sflush_r+0x6c>
   81362:	f8d8 3000 	ldr.w	r3, [r8]
   81366:	2b00      	cmp	r3, #0
   81368:	d0e1      	beq.n	8132e <__sflush_r+0xfe>
   8136a:	2b1d      	cmp	r3, #29
   8136c:	d001      	beq.n	81372 <__sflush_r+0x142>
   8136e:	2b16      	cmp	r3, #22
   81370:	d1be      	bne.n	812f0 <__sflush_r+0xc0>
   81372:	f8c8 4000 	str.w	r4, [r8]
   81376:	e7b8      	b.n	812ea <__sflush_r+0xba>

00081378 <_fflush_r>:
   81378:	b510      	push	{r4, lr}
   8137a:	4604      	mov	r4, r0
   8137c:	b082      	sub	sp, #8
   8137e:	b108      	cbz	r0, 81384 <_fflush_r+0xc>
   81380:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81382:	b153      	cbz	r3, 8139a <_fflush_r+0x22>
   81384:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81388:	b908      	cbnz	r0, 8138e <_fflush_r+0x16>
   8138a:	b002      	add	sp, #8
   8138c:	bd10      	pop	{r4, pc}
   8138e:	4620      	mov	r0, r4
   81390:	b002      	add	sp, #8
   81392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81396:	f7ff bf4b 	b.w	81230 <__sflush_r>
   8139a:	9101      	str	r1, [sp, #4]
   8139c:	f000 f880 	bl	814a0 <__sinit>
   813a0:	9901      	ldr	r1, [sp, #4]
   813a2:	e7ef      	b.n	81384 <_fflush_r+0xc>

000813a4 <_cleanup_r>:
   813a4:	4901      	ldr	r1, [pc, #4]	; (813ac <_cleanup_r+0x8>)
   813a6:	f000 bb51 	b.w	81a4c <_fwalk_reent>
   813aa:	bf00      	nop
   813ac:	00082861 	.word	0x00082861

000813b0 <__sinit.part.1>:
   813b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   813b4:	4607      	mov	r7, r0
   813b6:	4835      	ldr	r0, [pc, #212]	; (8148c <__sinit.part.1+0xdc>)
   813b8:	687d      	ldr	r5, [r7, #4]
   813ba:	2400      	movs	r4, #0
   813bc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   813c0:	2304      	movs	r3, #4
   813c2:	2103      	movs	r1, #3
   813c4:	63f8      	str	r0, [r7, #60]	; 0x3c
   813c6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   813ca:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   813ce:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   813d2:	b083      	sub	sp, #12
   813d4:	602c      	str	r4, [r5, #0]
   813d6:	606c      	str	r4, [r5, #4]
   813d8:	60ac      	str	r4, [r5, #8]
   813da:	666c      	str	r4, [r5, #100]	; 0x64
   813dc:	81ec      	strh	r4, [r5, #14]
   813de:	612c      	str	r4, [r5, #16]
   813e0:	616c      	str	r4, [r5, #20]
   813e2:	61ac      	str	r4, [r5, #24]
   813e4:	81ab      	strh	r3, [r5, #12]
   813e6:	4621      	mov	r1, r4
   813e8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   813ec:	2208      	movs	r2, #8
   813ee:	f7ff fd75 	bl	80edc <memset>
   813f2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 81490 <__sinit.part.1+0xe0>
   813f6:	68be      	ldr	r6, [r7, #8]
   813f8:	f8df a098 	ldr.w	sl, [pc, #152]	; 81494 <__sinit.part.1+0xe4>
   813fc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 81498 <__sinit.part.1+0xe8>
   81400:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8149c <__sinit.part.1+0xec>
   81404:	2301      	movs	r3, #1
   81406:	2209      	movs	r2, #9
   81408:	f8c5 b020 	str.w	fp, [r5, #32]
   8140c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   81410:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81414:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81418:	61ed      	str	r5, [r5, #28]
   8141a:	4621      	mov	r1, r4
   8141c:	81f3      	strh	r3, [r6, #14]
   8141e:	81b2      	strh	r2, [r6, #12]
   81420:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   81424:	6034      	str	r4, [r6, #0]
   81426:	6074      	str	r4, [r6, #4]
   81428:	60b4      	str	r4, [r6, #8]
   8142a:	6674      	str	r4, [r6, #100]	; 0x64
   8142c:	6134      	str	r4, [r6, #16]
   8142e:	6174      	str	r4, [r6, #20]
   81430:	61b4      	str	r4, [r6, #24]
   81432:	2208      	movs	r2, #8
   81434:	9301      	str	r3, [sp, #4]
   81436:	f7ff fd51 	bl	80edc <memset>
   8143a:	68fd      	ldr	r5, [r7, #12]
   8143c:	2012      	movs	r0, #18
   8143e:	2202      	movs	r2, #2
   81440:	61f6      	str	r6, [r6, #28]
   81442:	f8c6 b020 	str.w	fp, [r6, #32]
   81446:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8144a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8144e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   81452:	4621      	mov	r1, r4
   81454:	81a8      	strh	r0, [r5, #12]
   81456:	81ea      	strh	r2, [r5, #14]
   81458:	602c      	str	r4, [r5, #0]
   8145a:	606c      	str	r4, [r5, #4]
   8145c:	60ac      	str	r4, [r5, #8]
   8145e:	666c      	str	r4, [r5, #100]	; 0x64
   81460:	612c      	str	r4, [r5, #16]
   81462:	616c      	str	r4, [r5, #20]
   81464:	61ac      	str	r4, [r5, #24]
   81466:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8146a:	2208      	movs	r2, #8
   8146c:	f7ff fd36 	bl	80edc <memset>
   81470:	9b01      	ldr	r3, [sp, #4]
   81472:	61ed      	str	r5, [r5, #28]
   81474:	f8c5 b020 	str.w	fp, [r5, #32]
   81478:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8147c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   81480:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   81484:	63bb      	str	r3, [r7, #56]	; 0x38
   81486:	b003      	add	sp, #12
   81488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8148c:	000813a5 	.word	0x000813a5
   81490:	000826ed 	.word	0x000826ed
   81494:	00082711 	.word	0x00082711
   81498:	00082749 	.word	0x00082749
   8149c:	00082769 	.word	0x00082769

000814a0 <__sinit>:
   814a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   814a2:	b103      	cbz	r3, 814a6 <__sinit+0x6>
   814a4:	4770      	bx	lr
   814a6:	f7ff bf83 	b.w	813b0 <__sinit.part.1>
   814aa:	bf00      	nop

000814ac <__sfp_lock_acquire>:
   814ac:	4770      	bx	lr
   814ae:	bf00      	nop

000814b0 <__sfp_lock_release>:
   814b0:	4770      	bx	lr
   814b2:	bf00      	nop

000814b4 <__libc_fini_array>:
   814b4:	b538      	push	{r3, r4, r5, lr}
   814b6:	4b08      	ldr	r3, [pc, #32]	; (814d8 <__libc_fini_array+0x24>)
   814b8:	4d08      	ldr	r5, [pc, #32]	; (814dc <__libc_fini_array+0x28>)
   814ba:	1aed      	subs	r5, r5, r3
   814bc:	10ac      	asrs	r4, r5, #2
   814be:	bf18      	it	ne
   814c0:	18ed      	addne	r5, r5, r3
   814c2:	d005      	beq.n	814d0 <__libc_fini_array+0x1c>
   814c4:	3c01      	subs	r4, #1
   814c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   814ca:	4798      	blx	r3
   814cc:	2c00      	cmp	r4, #0
   814ce:	d1f9      	bne.n	814c4 <__libc_fini_array+0x10>
   814d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   814d4:	f001 baa4 	b.w	82a20 <_fini>
   814d8:	00082a2c 	.word	0x00082a2c
   814dc:	00082a30 	.word	0x00082a30

000814e0 <_malloc_trim_r>:
   814e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   814e2:	460c      	mov	r4, r1
   814e4:	4f22      	ldr	r7, [pc, #136]	; (81570 <_malloc_trim_r+0x90>)
   814e6:	4606      	mov	r6, r0
   814e8:	f000 fefa 	bl	822e0 <__malloc_lock>
   814ec:	68bb      	ldr	r3, [r7, #8]
   814ee:	685d      	ldr	r5, [r3, #4]
   814f0:	f025 0503 	bic.w	r5, r5, #3
   814f4:	1b29      	subs	r1, r5, r4
   814f6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   814fa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   814fe:	f021 010f 	bic.w	r1, r1, #15
   81502:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   81506:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8150a:	db07      	blt.n	8151c <_malloc_trim_r+0x3c>
   8150c:	4630      	mov	r0, r6
   8150e:	2100      	movs	r1, #0
   81510:	f001 f8da 	bl	826c8 <_sbrk_r>
   81514:	68bb      	ldr	r3, [r7, #8]
   81516:	442b      	add	r3, r5
   81518:	4298      	cmp	r0, r3
   8151a:	d004      	beq.n	81526 <_malloc_trim_r+0x46>
   8151c:	4630      	mov	r0, r6
   8151e:	f000 fee1 	bl	822e4 <__malloc_unlock>
   81522:	2000      	movs	r0, #0
   81524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81526:	4630      	mov	r0, r6
   81528:	4261      	negs	r1, r4
   8152a:	f001 f8cd 	bl	826c8 <_sbrk_r>
   8152e:	3001      	adds	r0, #1
   81530:	d00d      	beq.n	8154e <_malloc_trim_r+0x6e>
   81532:	4b10      	ldr	r3, [pc, #64]	; (81574 <_malloc_trim_r+0x94>)
   81534:	68ba      	ldr	r2, [r7, #8]
   81536:	6819      	ldr	r1, [r3, #0]
   81538:	1b2d      	subs	r5, r5, r4
   8153a:	f045 0501 	orr.w	r5, r5, #1
   8153e:	4630      	mov	r0, r6
   81540:	1b09      	subs	r1, r1, r4
   81542:	6055      	str	r5, [r2, #4]
   81544:	6019      	str	r1, [r3, #0]
   81546:	f000 fecd 	bl	822e4 <__malloc_unlock>
   8154a:	2001      	movs	r0, #1
   8154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8154e:	4630      	mov	r0, r6
   81550:	2100      	movs	r1, #0
   81552:	f001 f8b9 	bl	826c8 <_sbrk_r>
   81556:	68ba      	ldr	r2, [r7, #8]
   81558:	1a83      	subs	r3, r0, r2
   8155a:	2b0f      	cmp	r3, #15
   8155c:	ddde      	ble.n	8151c <_malloc_trim_r+0x3c>
   8155e:	4c06      	ldr	r4, [pc, #24]	; (81578 <_malloc_trim_r+0x98>)
   81560:	4904      	ldr	r1, [pc, #16]	; (81574 <_malloc_trim_r+0x94>)
   81562:	6824      	ldr	r4, [r4, #0]
   81564:	f043 0301 	orr.w	r3, r3, #1
   81568:	1b00      	subs	r0, r0, r4
   8156a:	6053      	str	r3, [r2, #4]
   8156c:	6008      	str	r0, [r1, #0]
   8156e:	e7d5      	b.n	8151c <_malloc_trim_r+0x3c>
   81570:	20070564 	.word	0x20070564
   81574:	20070a18 	.word	0x20070a18
   81578:	20070970 	.word	0x20070970

0008157c <_free_r>:
   8157c:	2900      	cmp	r1, #0
   8157e:	d04e      	beq.n	8161e <_free_r+0xa2>
   81580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81584:	460c      	mov	r4, r1
   81586:	4680      	mov	r8, r0
   81588:	f000 feaa 	bl	822e0 <__malloc_lock>
   8158c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   81590:	4962      	ldr	r1, [pc, #392]	; (8171c <_free_r+0x1a0>)
   81592:	f1a4 0508 	sub.w	r5, r4, #8
   81596:	f027 0201 	bic.w	r2, r7, #1
   8159a:	18ab      	adds	r3, r5, r2
   8159c:	688e      	ldr	r6, [r1, #8]
   8159e:	6858      	ldr	r0, [r3, #4]
   815a0:	429e      	cmp	r6, r3
   815a2:	f020 0003 	bic.w	r0, r0, #3
   815a6:	d05a      	beq.n	8165e <_free_r+0xe2>
   815a8:	07fe      	lsls	r6, r7, #31
   815aa:	6058      	str	r0, [r3, #4]
   815ac:	d40b      	bmi.n	815c6 <_free_r+0x4a>
   815ae:	f854 7c08 	ldr.w	r7, [r4, #-8]
   815b2:	f101 0e08 	add.w	lr, r1, #8
   815b6:	1bed      	subs	r5, r5, r7
   815b8:	68ac      	ldr	r4, [r5, #8]
   815ba:	443a      	add	r2, r7
   815bc:	4574      	cmp	r4, lr
   815be:	d067      	beq.n	81690 <_free_r+0x114>
   815c0:	68ef      	ldr	r7, [r5, #12]
   815c2:	60e7      	str	r7, [r4, #12]
   815c4:	60bc      	str	r4, [r7, #8]
   815c6:	181c      	adds	r4, r3, r0
   815c8:	6864      	ldr	r4, [r4, #4]
   815ca:	07e4      	lsls	r4, r4, #31
   815cc:	d40c      	bmi.n	815e8 <_free_r+0x6c>
   815ce:	4f54      	ldr	r7, [pc, #336]	; (81720 <_free_r+0x1a4>)
   815d0:	689c      	ldr	r4, [r3, #8]
   815d2:	4402      	add	r2, r0
   815d4:	42bc      	cmp	r4, r7
   815d6:	d07c      	beq.n	816d2 <_free_r+0x156>
   815d8:	68d8      	ldr	r0, [r3, #12]
   815da:	f042 0301 	orr.w	r3, r2, #1
   815de:	60e0      	str	r0, [r4, #12]
   815e0:	6084      	str	r4, [r0, #8]
   815e2:	606b      	str	r3, [r5, #4]
   815e4:	50aa      	str	r2, [r5, r2]
   815e6:	e003      	b.n	815f0 <_free_r+0x74>
   815e8:	f042 0301 	orr.w	r3, r2, #1
   815ec:	606b      	str	r3, [r5, #4]
   815ee:	50aa      	str	r2, [r5, r2]
   815f0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   815f4:	d214      	bcs.n	81620 <_free_r+0xa4>
   815f6:	08d2      	lsrs	r2, r2, #3
   815f8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   815fc:	2401      	movs	r4, #1
   815fe:	6848      	ldr	r0, [r1, #4]
   81600:	1092      	asrs	r2, r2, #2
   81602:	fa04 f202 	lsl.w	r2, r4, r2
   81606:	689c      	ldr	r4, [r3, #8]
   81608:	4310      	orrs	r0, r2
   8160a:	60ac      	str	r4, [r5, #8]
   8160c:	60eb      	str	r3, [r5, #12]
   8160e:	6048      	str	r0, [r1, #4]
   81610:	609d      	str	r5, [r3, #8]
   81612:	60e5      	str	r5, [r4, #12]
   81614:	4640      	mov	r0, r8
   81616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8161a:	f000 be63 	b.w	822e4 <__malloc_unlock>
   8161e:	4770      	bx	lr
   81620:	0a53      	lsrs	r3, r2, #9
   81622:	2b04      	cmp	r3, #4
   81624:	d847      	bhi.n	816b6 <_free_r+0x13a>
   81626:	0993      	lsrs	r3, r2, #6
   81628:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8162c:	0060      	lsls	r0, r4, #1
   8162e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   81632:	6883      	ldr	r3, [r0, #8]
   81634:	4939      	ldr	r1, [pc, #228]	; (8171c <_free_r+0x1a0>)
   81636:	4283      	cmp	r3, r0
   81638:	d043      	beq.n	816c2 <_free_r+0x146>
   8163a:	6859      	ldr	r1, [r3, #4]
   8163c:	f021 0103 	bic.w	r1, r1, #3
   81640:	4291      	cmp	r1, r2
   81642:	d902      	bls.n	8164a <_free_r+0xce>
   81644:	689b      	ldr	r3, [r3, #8]
   81646:	4298      	cmp	r0, r3
   81648:	d1f7      	bne.n	8163a <_free_r+0xbe>
   8164a:	68da      	ldr	r2, [r3, #12]
   8164c:	60ea      	str	r2, [r5, #12]
   8164e:	60ab      	str	r3, [r5, #8]
   81650:	4640      	mov	r0, r8
   81652:	6095      	str	r5, [r2, #8]
   81654:	60dd      	str	r5, [r3, #12]
   81656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8165a:	f000 be43 	b.w	822e4 <__malloc_unlock>
   8165e:	07ff      	lsls	r7, r7, #31
   81660:	4402      	add	r2, r0
   81662:	d407      	bmi.n	81674 <_free_r+0xf8>
   81664:	f854 4c08 	ldr.w	r4, [r4, #-8]
   81668:	1b2d      	subs	r5, r5, r4
   8166a:	68eb      	ldr	r3, [r5, #12]
   8166c:	68a8      	ldr	r0, [r5, #8]
   8166e:	4422      	add	r2, r4
   81670:	60c3      	str	r3, [r0, #12]
   81672:	6098      	str	r0, [r3, #8]
   81674:	4b2b      	ldr	r3, [pc, #172]	; (81724 <_free_r+0x1a8>)
   81676:	f042 0001 	orr.w	r0, r2, #1
   8167a:	681b      	ldr	r3, [r3, #0]
   8167c:	6068      	str	r0, [r5, #4]
   8167e:	429a      	cmp	r2, r3
   81680:	608d      	str	r5, [r1, #8]
   81682:	d3c7      	bcc.n	81614 <_free_r+0x98>
   81684:	4b28      	ldr	r3, [pc, #160]	; (81728 <_free_r+0x1ac>)
   81686:	4640      	mov	r0, r8
   81688:	6819      	ldr	r1, [r3, #0]
   8168a:	f7ff ff29 	bl	814e0 <_malloc_trim_r>
   8168e:	e7c1      	b.n	81614 <_free_r+0x98>
   81690:	1819      	adds	r1, r3, r0
   81692:	6849      	ldr	r1, [r1, #4]
   81694:	07c9      	lsls	r1, r1, #31
   81696:	d409      	bmi.n	816ac <_free_r+0x130>
   81698:	68d9      	ldr	r1, [r3, #12]
   8169a:	4402      	add	r2, r0
   8169c:	689b      	ldr	r3, [r3, #8]
   8169e:	f042 0001 	orr.w	r0, r2, #1
   816a2:	60d9      	str	r1, [r3, #12]
   816a4:	608b      	str	r3, [r1, #8]
   816a6:	6068      	str	r0, [r5, #4]
   816a8:	50aa      	str	r2, [r5, r2]
   816aa:	e7b3      	b.n	81614 <_free_r+0x98>
   816ac:	f042 0301 	orr.w	r3, r2, #1
   816b0:	606b      	str	r3, [r5, #4]
   816b2:	50aa      	str	r2, [r5, r2]
   816b4:	e7ae      	b.n	81614 <_free_r+0x98>
   816b6:	2b14      	cmp	r3, #20
   816b8:	d814      	bhi.n	816e4 <_free_r+0x168>
   816ba:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   816be:	0060      	lsls	r0, r4, #1
   816c0:	e7b5      	b.n	8162e <_free_r+0xb2>
   816c2:	684a      	ldr	r2, [r1, #4]
   816c4:	10a4      	asrs	r4, r4, #2
   816c6:	2001      	movs	r0, #1
   816c8:	40a0      	lsls	r0, r4
   816ca:	4302      	orrs	r2, r0
   816cc:	604a      	str	r2, [r1, #4]
   816ce:	461a      	mov	r2, r3
   816d0:	e7bc      	b.n	8164c <_free_r+0xd0>
   816d2:	f042 0301 	orr.w	r3, r2, #1
   816d6:	614d      	str	r5, [r1, #20]
   816d8:	610d      	str	r5, [r1, #16]
   816da:	60ec      	str	r4, [r5, #12]
   816dc:	60ac      	str	r4, [r5, #8]
   816de:	606b      	str	r3, [r5, #4]
   816e0:	50aa      	str	r2, [r5, r2]
   816e2:	e797      	b.n	81614 <_free_r+0x98>
   816e4:	2b54      	cmp	r3, #84	; 0x54
   816e6:	d804      	bhi.n	816f2 <_free_r+0x176>
   816e8:	0b13      	lsrs	r3, r2, #12
   816ea:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   816ee:	0060      	lsls	r0, r4, #1
   816f0:	e79d      	b.n	8162e <_free_r+0xb2>
   816f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   816f6:	d804      	bhi.n	81702 <_free_r+0x186>
   816f8:	0bd3      	lsrs	r3, r2, #15
   816fa:	f103 0477 	add.w	r4, r3, #119	; 0x77
   816fe:	0060      	lsls	r0, r4, #1
   81700:	e795      	b.n	8162e <_free_r+0xb2>
   81702:	f240 5054 	movw	r0, #1364	; 0x554
   81706:	4283      	cmp	r3, r0
   81708:	d804      	bhi.n	81714 <_free_r+0x198>
   8170a:	0c93      	lsrs	r3, r2, #18
   8170c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   81710:	0060      	lsls	r0, r4, #1
   81712:	e78c      	b.n	8162e <_free_r+0xb2>
   81714:	20fc      	movs	r0, #252	; 0xfc
   81716:	247e      	movs	r4, #126	; 0x7e
   81718:	e789      	b.n	8162e <_free_r+0xb2>
   8171a:	bf00      	nop
   8171c:	20070564 	.word	0x20070564
   81720:	2007056c 	.word	0x2007056c
   81724:	2007096c 	.word	0x2007096c
   81728:	20070a14 	.word	0x20070a14

0008172c <__sfvwrite_r>:
   8172c:	6893      	ldr	r3, [r2, #8]
   8172e:	2b00      	cmp	r3, #0
   81730:	f000 80b1 	beq.w	81896 <__sfvwrite_r+0x16a>
   81734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81738:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8173c:	b083      	sub	sp, #12
   8173e:	f01e 0f08 	tst.w	lr, #8
   81742:	460c      	mov	r4, r1
   81744:	4681      	mov	r9, r0
   81746:	4616      	mov	r6, r2
   81748:	d028      	beq.n	8179c <__sfvwrite_r+0x70>
   8174a:	690b      	ldr	r3, [r1, #16]
   8174c:	b333      	cbz	r3, 8179c <__sfvwrite_r+0x70>
   8174e:	f00e 0802 	and.w	r8, lr, #2
   81752:	fa1f f088 	uxth.w	r0, r8
   81756:	6835      	ldr	r5, [r6, #0]
   81758:	b380      	cbz	r0, 817bc <__sfvwrite_r+0x90>
   8175a:	f04f 0b00 	mov.w	fp, #0
   8175e:	46d8      	mov	r8, fp
   81760:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 81a48 <__sfvwrite_r+0x31c>
   81764:	f1b8 0f00 	cmp.w	r8, #0
   81768:	f000 808f 	beq.w	8188a <__sfvwrite_r+0x15e>
   8176c:	45d0      	cmp	r8, sl
   8176e:	4643      	mov	r3, r8
   81770:	4648      	mov	r0, r9
   81772:	bf28      	it	cs
   81774:	4653      	movcs	r3, sl
   81776:	69e1      	ldr	r1, [r4, #28]
   81778:	465a      	mov	r2, fp
   8177a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8177c:	47b8      	blx	r7
   8177e:	2800      	cmp	r0, #0
   81780:	f340 80a8 	ble.w	818d4 <__sfvwrite_r+0x1a8>
   81784:	68b3      	ldr	r3, [r6, #8]
   81786:	4483      	add	fp, r0
   81788:	1a1b      	subs	r3, r3, r0
   8178a:	ebc0 0808 	rsb	r8, r0, r8
   8178e:	60b3      	str	r3, [r6, #8]
   81790:	2b00      	cmp	r3, #0
   81792:	d1e7      	bne.n	81764 <__sfvwrite_r+0x38>
   81794:	2000      	movs	r0, #0
   81796:	b003      	add	sp, #12
   81798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8179c:	4648      	mov	r0, r9
   8179e:	4621      	mov	r1, r4
   817a0:	f7ff fcd4 	bl	8114c <__swsetup_r>
   817a4:	2800      	cmp	r0, #0
   817a6:	f040 8146 	bne.w	81a36 <__sfvwrite_r+0x30a>
   817aa:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   817ae:	6835      	ldr	r5, [r6, #0]
   817b0:	f00e 0802 	and.w	r8, lr, #2
   817b4:	fa1f f088 	uxth.w	r0, r8
   817b8:	2800      	cmp	r0, #0
   817ba:	d1ce      	bne.n	8175a <__sfvwrite_r+0x2e>
   817bc:	f01e 0b01 	ands.w	fp, lr, #1
   817c0:	f040 8091 	bne.w	818e6 <__sfvwrite_r+0x1ba>
   817c4:	46d8      	mov	r8, fp
   817c6:	f1b8 0f00 	cmp.w	r8, #0
   817ca:	d058      	beq.n	8187e <__sfvwrite_r+0x152>
   817cc:	f41e 7f00 	tst.w	lr, #512	; 0x200
   817d0:	68a7      	ldr	r7, [r4, #8]
   817d2:	d062      	beq.n	8189a <__sfvwrite_r+0x16e>
   817d4:	45b8      	cmp	r8, r7
   817d6:	46ba      	mov	sl, r7
   817d8:	f0c0 80c2 	bcc.w	81960 <__sfvwrite_r+0x234>
   817dc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   817e0:	f000 80c0 	beq.w	81964 <__sfvwrite_r+0x238>
   817e4:	6967      	ldr	r7, [r4, #20]
   817e6:	6921      	ldr	r1, [r4, #16]
   817e8:	6823      	ldr	r3, [r4, #0]
   817ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   817ee:	1a5b      	subs	r3, r3, r1
   817f0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   817f4:	1c58      	adds	r0, r3, #1
   817f6:	107f      	asrs	r7, r7, #1
   817f8:	4440      	add	r0, r8
   817fa:	4287      	cmp	r7, r0
   817fc:	463a      	mov	r2, r7
   817fe:	bf3c      	itt	cc
   81800:	4607      	movcc	r7, r0
   81802:	463a      	movcc	r2, r7
   81804:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   81808:	9300      	str	r3, [sp, #0]
   8180a:	f000 80fb 	beq.w	81a04 <__sfvwrite_r+0x2d8>
   8180e:	4611      	mov	r1, r2
   81810:	4648      	mov	r0, r9
   81812:	f000 f9bb 	bl	81b8c <_malloc_r>
   81816:	9b00      	ldr	r3, [sp, #0]
   81818:	4682      	mov	sl, r0
   8181a:	2800      	cmp	r0, #0
   8181c:	f000 810e 	beq.w	81a3c <__sfvwrite_r+0x310>
   81820:	461a      	mov	r2, r3
   81822:	6921      	ldr	r1, [r4, #16]
   81824:	9300      	str	r3, [sp, #0]
   81826:	f000 fc81 	bl	8212c <memcpy>
   8182a:	89a2      	ldrh	r2, [r4, #12]
   8182c:	9b00      	ldr	r3, [sp, #0]
   8182e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   81832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81836:	81a2      	strh	r2, [r4, #12]
   81838:	eb0a 0003 	add.w	r0, sl, r3
   8183c:	f8c4 a010 	str.w	sl, [r4, #16]
   81840:	1afb      	subs	r3, r7, r3
   81842:	6167      	str	r7, [r4, #20]
   81844:	46c2      	mov	sl, r8
   81846:	4647      	mov	r7, r8
   81848:	6020      	str	r0, [r4, #0]
   8184a:	60a3      	str	r3, [r4, #8]
   8184c:	4652      	mov	r2, sl
   8184e:	4659      	mov	r1, fp
   81850:	f000 fce2 	bl	82218 <memmove>
   81854:	68a0      	ldr	r0, [r4, #8]
   81856:	6822      	ldr	r2, [r4, #0]
   81858:	1bc0      	subs	r0, r0, r7
   8185a:	60a0      	str	r0, [r4, #8]
   8185c:	4640      	mov	r0, r8
   8185e:	eb02 030a 	add.w	r3, r2, sl
   81862:	6023      	str	r3, [r4, #0]
   81864:	68b3      	ldr	r3, [r6, #8]
   81866:	4483      	add	fp, r0
   81868:	1a1b      	subs	r3, r3, r0
   8186a:	ebc0 0808 	rsb	r8, r0, r8
   8186e:	60b3      	str	r3, [r6, #8]
   81870:	2b00      	cmp	r3, #0
   81872:	d08f      	beq.n	81794 <__sfvwrite_r+0x68>
   81874:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   81878:	f1b8 0f00 	cmp.w	r8, #0
   8187c:	d1a6      	bne.n	817cc <__sfvwrite_r+0xa0>
   8187e:	f8d5 b000 	ldr.w	fp, [r5]
   81882:	f8d5 8004 	ldr.w	r8, [r5, #4]
   81886:	3508      	adds	r5, #8
   81888:	e79d      	b.n	817c6 <__sfvwrite_r+0x9a>
   8188a:	f8d5 b000 	ldr.w	fp, [r5]
   8188e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   81892:	3508      	adds	r5, #8
   81894:	e766      	b.n	81764 <__sfvwrite_r+0x38>
   81896:	2000      	movs	r0, #0
   81898:	4770      	bx	lr
   8189a:	6820      	ldr	r0, [r4, #0]
   8189c:	6923      	ldr	r3, [r4, #16]
   8189e:	4298      	cmp	r0, r3
   818a0:	d803      	bhi.n	818aa <__sfvwrite_r+0x17e>
   818a2:	6962      	ldr	r2, [r4, #20]
   818a4:	4590      	cmp	r8, r2
   818a6:	f080 8085 	bcs.w	819b4 <__sfvwrite_r+0x288>
   818aa:	4547      	cmp	r7, r8
   818ac:	bf28      	it	cs
   818ae:	4647      	movcs	r7, r8
   818b0:	4659      	mov	r1, fp
   818b2:	463a      	mov	r2, r7
   818b4:	f000 fcb0 	bl	82218 <memmove>
   818b8:	68a3      	ldr	r3, [r4, #8]
   818ba:	6822      	ldr	r2, [r4, #0]
   818bc:	1bdb      	subs	r3, r3, r7
   818be:	443a      	add	r2, r7
   818c0:	60a3      	str	r3, [r4, #8]
   818c2:	6022      	str	r2, [r4, #0]
   818c4:	2b00      	cmp	r3, #0
   818c6:	d149      	bne.n	8195c <__sfvwrite_r+0x230>
   818c8:	4648      	mov	r0, r9
   818ca:	4621      	mov	r1, r4
   818cc:	f7ff fd54 	bl	81378 <_fflush_r>
   818d0:	2800      	cmp	r0, #0
   818d2:	d043      	beq.n	8195c <__sfvwrite_r+0x230>
   818d4:	89a3      	ldrh	r3, [r4, #12]
   818d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   818da:	f04f 30ff 	mov.w	r0, #4294967295
   818de:	81a3      	strh	r3, [r4, #12]
   818e0:	b003      	add	sp, #12
   818e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818e6:	4680      	mov	r8, r0
   818e8:	4683      	mov	fp, r0
   818ea:	4682      	mov	sl, r0
   818ec:	9000      	str	r0, [sp, #0]
   818ee:	f1ba 0f00 	cmp.w	sl, #0
   818f2:	d02b      	beq.n	8194c <__sfvwrite_r+0x220>
   818f4:	9b00      	ldr	r3, [sp, #0]
   818f6:	2b00      	cmp	r3, #0
   818f8:	d04f      	beq.n	8199a <__sfvwrite_r+0x26e>
   818fa:	45d0      	cmp	r8, sl
   818fc:	4643      	mov	r3, r8
   818fe:	bf28      	it	cs
   81900:	4653      	movcs	r3, sl
   81902:	6820      	ldr	r0, [r4, #0]
   81904:	6921      	ldr	r1, [r4, #16]
   81906:	461f      	mov	r7, r3
   81908:	4288      	cmp	r0, r1
   8190a:	f8d4 e008 	ldr.w	lr, [r4, #8]
   8190e:	6962      	ldr	r2, [r4, #20]
   81910:	d903      	bls.n	8191a <__sfvwrite_r+0x1ee>
   81912:	eb0e 0c02 	add.w	ip, lr, r2
   81916:	4563      	cmp	r3, ip
   81918:	dc5e      	bgt.n	819d8 <__sfvwrite_r+0x2ac>
   8191a:	4293      	cmp	r3, r2
   8191c:	db24      	blt.n	81968 <__sfvwrite_r+0x23c>
   8191e:	4613      	mov	r3, r2
   81920:	6a67      	ldr	r7, [r4, #36]	; 0x24
   81922:	4648      	mov	r0, r9
   81924:	69e1      	ldr	r1, [r4, #28]
   81926:	465a      	mov	r2, fp
   81928:	47b8      	blx	r7
   8192a:	1e07      	subs	r7, r0, #0
   8192c:	ddd2      	ble.n	818d4 <__sfvwrite_r+0x1a8>
   8192e:	ebb8 0807 	subs.w	r8, r8, r7
   81932:	d029      	beq.n	81988 <__sfvwrite_r+0x25c>
   81934:	68b3      	ldr	r3, [r6, #8]
   81936:	44bb      	add	fp, r7
   81938:	1bdb      	subs	r3, r3, r7
   8193a:	ebc7 0a0a 	rsb	sl, r7, sl
   8193e:	60b3      	str	r3, [r6, #8]
   81940:	2b00      	cmp	r3, #0
   81942:	f43f af27 	beq.w	81794 <__sfvwrite_r+0x68>
   81946:	f1ba 0f00 	cmp.w	sl, #0
   8194a:	d1d3      	bne.n	818f4 <__sfvwrite_r+0x1c8>
   8194c:	2300      	movs	r3, #0
   8194e:	f8d5 b000 	ldr.w	fp, [r5]
   81952:	f8d5 a004 	ldr.w	sl, [r5, #4]
   81956:	9300      	str	r3, [sp, #0]
   81958:	3508      	adds	r5, #8
   8195a:	e7c8      	b.n	818ee <__sfvwrite_r+0x1c2>
   8195c:	4638      	mov	r0, r7
   8195e:	e781      	b.n	81864 <__sfvwrite_r+0x138>
   81960:	4647      	mov	r7, r8
   81962:	46c2      	mov	sl, r8
   81964:	6820      	ldr	r0, [r4, #0]
   81966:	e771      	b.n	8184c <__sfvwrite_r+0x120>
   81968:	461a      	mov	r2, r3
   8196a:	4659      	mov	r1, fp
   8196c:	9301      	str	r3, [sp, #4]
   8196e:	f000 fc53 	bl	82218 <memmove>
   81972:	68a2      	ldr	r2, [r4, #8]
   81974:	6821      	ldr	r1, [r4, #0]
   81976:	9b01      	ldr	r3, [sp, #4]
   81978:	ebb8 0807 	subs.w	r8, r8, r7
   8197c:	eba2 0203 	sub.w	r2, r2, r3
   81980:	440b      	add	r3, r1
   81982:	60a2      	str	r2, [r4, #8]
   81984:	6023      	str	r3, [r4, #0]
   81986:	d1d5      	bne.n	81934 <__sfvwrite_r+0x208>
   81988:	4648      	mov	r0, r9
   8198a:	4621      	mov	r1, r4
   8198c:	f7ff fcf4 	bl	81378 <_fflush_r>
   81990:	2800      	cmp	r0, #0
   81992:	d19f      	bne.n	818d4 <__sfvwrite_r+0x1a8>
   81994:	f8cd 8000 	str.w	r8, [sp]
   81998:	e7cc      	b.n	81934 <__sfvwrite_r+0x208>
   8199a:	4658      	mov	r0, fp
   8199c:	210a      	movs	r1, #10
   8199e:	4652      	mov	r2, sl
   819a0:	f000 fb7a 	bl	82098 <memchr>
   819a4:	2800      	cmp	r0, #0
   819a6:	d041      	beq.n	81a2c <__sfvwrite_r+0x300>
   819a8:	3001      	adds	r0, #1
   819aa:	2301      	movs	r3, #1
   819ac:	ebcb 0800 	rsb	r8, fp, r0
   819b0:	9300      	str	r3, [sp, #0]
   819b2:	e7a2      	b.n	818fa <__sfvwrite_r+0x1ce>
   819b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   819b8:	4543      	cmp	r3, r8
   819ba:	bf28      	it	cs
   819bc:	4643      	movcs	r3, r8
   819be:	fb93 f3f2 	sdiv	r3, r3, r2
   819c2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   819c4:	fb03 f302 	mul.w	r3, r3, r2
   819c8:	4648      	mov	r0, r9
   819ca:	69e1      	ldr	r1, [r4, #28]
   819cc:	465a      	mov	r2, fp
   819ce:	47b8      	blx	r7
   819d0:	2800      	cmp	r0, #0
   819d2:	f73f af47 	bgt.w	81864 <__sfvwrite_r+0x138>
   819d6:	e77d      	b.n	818d4 <__sfvwrite_r+0x1a8>
   819d8:	4662      	mov	r2, ip
   819da:	4659      	mov	r1, fp
   819dc:	f8cd c004 	str.w	ip, [sp, #4]
   819e0:	f000 fc1a 	bl	82218 <memmove>
   819e4:	6823      	ldr	r3, [r4, #0]
   819e6:	f8dd c004 	ldr.w	ip, [sp, #4]
   819ea:	4648      	mov	r0, r9
   819ec:	4463      	add	r3, ip
   819ee:	6023      	str	r3, [r4, #0]
   819f0:	4621      	mov	r1, r4
   819f2:	f7ff fcc1 	bl	81378 <_fflush_r>
   819f6:	f8dd c004 	ldr.w	ip, [sp, #4]
   819fa:	2800      	cmp	r0, #0
   819fc:	f47f af6a 	bne.w	818d4 <__sfvwrite_r+0x1a8>
   81a00:	4667      	mov	r7, ip
   81a02:	e794      	b.n	8192e <__sfvwrite_r+0x202>
   81a04:	4648      	mov	r0, r9
   81a06:	f000 fc6f 	bl	822e8 <_realloc_r>
   81a0a:	9b00      	ldr	r3, [sp, #0]
   81a0c:	4682      	mov	sl, r0
   81a0e:	2800      	cmp	r0, #0
   81a10:	f47f af12 	bne.w	81838 <__sfvwrite_r+0x10c>
   81a14:	4648      	mov	r0, r9
   81a16:	6921      	ldr	r1, [r4, #16]
   81a18:	f7ff fdb0 	bl	8157c <_free_r>
   81a1c:	89a3      	ldrh	r3, [r4, #12]
   81a1e:	220c      	movs	r2, #12
   81a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81a24:	b29b      	uxth	r3, r3
   81a26:	f8c9 2000 	str.w	r2, [r9]
   81a2a:	e754      	b.n	818d6 <__sfvwrite_r+0x1aa>
   81a2c:	2301      	movs	r3, #1
   81a2e:	f10a 0801 	add.w	r8, sl, #1
   81a32:	9300      	str	r3, [sp, #0]
   81a34:	e761      	b.n	818fa <__sfvwrite_r+0x1ce>
   81a36:	f04f 30ff 	mov.w	r0, #4294967295
   81a3a:	e6ac      	b.n	81796 <__sfvwrite_r+0x6a>
   81a3c:	230c      	movs	r3, #12
   81a3e:	f8c9 3000 	str.w	r3, [r9]
   81a42:	89a3      	ldrh	r3, [r4, #12]
   81a44:	e747      	b.n	818d6 <__sfvwrite_r+0x1aa>
   81a46:	bf00      	nop
   81a48:	7ffffc00 	.word	0x7ffffc00

00081a4c <_fwalk_reent>:
   81a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81a50:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   81a54:	d01e      	beq.n	81a94 <_fwalk_reent+0x48>
   81a56:	4688      	mov	r8, r1
   81a58:	4607      	mov	r7, r0
   81a5a:	f04f 0900 	mov.w	r9, #0
   81a5e:	6875      	ldr	r5, [r6, #4]
   81a60:	68b4      	ldr	r4, [r6, #8]
   81a62:	3d01      	subs	r5, #1
   81a64:	d410      	bmi.n	81a88 <_fwalk_reent+0x3c>
   81a66:	89a3      	ldrh	r3, [r4, #12]
   81a68:	3d01      	subs	r5, #1
   81a6a:	2b01      	cmp	r3, #1
   81a6c:	d908      	bls.n	81a80 <_fwalk_reent+0x34>
   81a6e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   81a72:	3301      	adds	r3, #1
   81a74:	d004      	beq.n	81a80 <_fwalk_reent+0x34>
   81a76:	4638      	mov	r0, r7
   81a78:	4621      	mov	r1, r4
   81a7a:	47c0      	blx	r8
   81a7c:	ea49 0900 	orr.w	r9, r9, r0
   81a80:	1c6b      	adds	r3, r5, #1
   81a82:	f104 0468 	add.w	r4, r4, #104	; 0x68
   81a86:	d1ee      	bne.n	81a66 <_fwalk_reent+0x1a>
   81a88:	6836      	ldr	r6, [r6, #0]
   81a8a:	2e00      	cmp	r6, #0
   81a8c:	d1e7      	bne.n	81a5e <_fwalk_reent+0x12>
   81a8e:	4648      	mov	r0, r9
   81a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a94:	46b1      	mov	r9, r6
   81a96:	4648      	mov	r0, r9
   81a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081a9c <__smakebuf_r>:
   81a9c:	898b      	ldrh	r3, [r1, #12]
   81a9e:	b29a      	uxth	r2, r3
   81aa0:	f012 0f02 	tst.w	r2, #2
   81aa4:	d13c      	bne.n	81b20 <__smakebuf_r+0x84>
   81aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
   81aa8:	460c      	mov	r4, r1
   81aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81aae:	b091      	sub	sp, #68	; 0x44
   81ab0:	2900      	cmp	r1, #0
   81ab2:	4605      	mov	r5, r0
   81ab4:	db19      	blt.n	81aea <__smakebuf_r+0x4e>
   81ab6:	aa01      	add	r2, sp, #4
   81ab8:	f000 ff14 	bl	828e4 <_fstat_r>
   81abc:	2800      	cmp	r0, #0
   81abe:	db12      	blt.n	81ae6 <__smakebuf_r+0x4a>
   81ac0:	9b02      	ldr	r3, [sp, #8]
   81ac2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   81ac6:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   81aca:	fab7 f787 	clz	r7, r7
   81ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   81ad2:	ea4f 1757 	mov.w	r7, r7, lsr #5
   81ad6:	d02a      	beq.n	81b2e <__smakebuf_r+0x92>
   81ad8:	89a3      	ldrh	r3, [r4, #12]
   81ada:	f44f 6680 	mov.w	r6, #1024	; 0x400
   81ade:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81ae2:	81a3      	strh	r3, [r4, #12]
   81ae4:	e00b      	b.n	81afe <__smakebuf_r+0x62>
   81ae6:	89a3      	ldrh	r3, [r4, #12]
   81ae8:	b29a      	uxth	r2, r3
   81aea:	f012 0f80 	tst.w	r2, #128	; 0x80
   81aee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81af2:	81a3      	strh	r3, [r4, #12]
   81af4:	bf0c      	ite	eq
   81af6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   81afa:	2640      	movne	r6, #64	; 0x40
   81afc:	2700      	movs	r7, #0
   81afe:	4628      	mov	r0, r5
   81b00:	4631      	mov	r1, r6
   81b02:	f000 f843 	bl	81b8c <_malloc_r>
   81b06:	89a3      	ldrh	r3, [r4, #12]
   81b08:	b340      	cbz	r0, 81b5c <__smakebuf_r+0xc0>
   81b0a:	4a1a      	ldr	r2, [pc, #104]	; (81b74 <__smakebuf_r+0xd8>)
   81b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81b10:	63ea      	str	r2, [r5, #60]	; 0x3c
   81b12:	81a3      	strh	r3, [r4, #12]
   81b14:	6020      	str	r0, [r4, #0]
   81b16:	6120      	str	r0, [r4, #16]
   81b18:	6166      	str	r6, [r4, #20]
   81b1a:	b99f      	cbnz	r7, 81b44 <__smakebuf_r+0xa8>
   81b1c:	b011      	add	sp, #68	; 0x44
   81b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81b20:	f101 0343 	add.w	r3, r1, #67	; 0x43
   81b24:	2201      	movs	r2, #1
   81b26:	600b      	str	r3, [r1, #0]
   81b28:	610b      	str	r3, [r1, #16]
   81b2a:	614a      	str	r2, [r1, #20]
   81b2c:	4770      	bx	lr
   81b2e:	4b12      	ldr	r3, [pc, #72]	; (81b78 <__smakebuf_r+0xdc>)
   81b30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   81b32:	429a      	cmp	r2, r3
   81b34:	d1d0      	bne.n	81ad8 <__smakebuf_r+0x3c>
   81b36:	89a3      	ldrh	r3, [r4, #12]
   81b38:	f44f 6680 	mov.w	r6, #1024	; 0x400
   81b3c:	4333      	orrs	r3, r6
   81b3e:	81a3      	strh	r3, [r4, #12]
   81b40:	64e6      	str	r6, [r4, #76]	; 0x4c
   81b42:	e7dc      	b.n	81afe <__smakebuf_r+0x62>
   81b44:	4628      	mov	r0, r5
   81b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81b4a:	f000 fedf 	bl	8290c <_isatty_r>
   81b4e:	2800      	cmp	r0, #0
   81b50:	d0e4      	beq.n	81b1c <__smakebuf_r+0x80>
   81b52:	89a3      	ldrh	r3, [r4, #12]
   81b54:	f043 0301 	orr.w	r3, r3, #1
   81b58:	81a3      	strh	r3, [r4, #12]
   81b5a:	e7df      	b.n	81b1c <__smakebuf_r+0x80>
   81b5c:	059a      	lsls	r2, r3, #22
   81b5e:	d4dd      	bmi.n	81b1c <__smakebuf_r+0x80>
   81b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81b64:	f043 0302 	orr.w	r3, r3, #2
   81b68:	2101      	movs	r1, #1
   81b6a:	81a3      	strh	r3, [r4, #12]
   81b6c:	6022      	str	r2, [r4, #0]
   81b6e:	6122      	str	r2, [r4, #16]
   81b70:	6161      	str	r1, [r4, #20]
   81b72:	e7d3      	b.n	81b1c <__smakebuf_r+0x80>
   81b74:	000813a5 	.word	0x000813a5
   81b78:	00082749 	.word	0x00082749

00081b7c <malloc>:
   81b7c:	4b02      	ldr	r3, [pc, #8]	; (81b88 <malloc+0xc>)
   81b7e:	4601      	mov	r1, r0
   81b80:	6818      	ldr	r0, [r3, #0]
   81b82:	f000 b803 	b.w	81b8c <_malloc_r>
   81b86:	bf00      	nop
   81b88:	20070560 	.word	0x20070560

00081b8c <_malloc_r>:
   81b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b90:	f101 050b 	add.w	r5, r1, #11
   81b94:	2d16      	cmp	r5, #22
   81b96:	b083      	sub	sp, #12
   81b98:	4606      	mov	r6, r0
   81b9a:	d927      	bls.n	81bec <_malloc_r+0x60>
   81b9c:	f035 0507 	bics.w	r5, r5, #7
   81ba0:	f100 80b6 	bmi.w	81d10 <_malloc_r+0x184>
   81ba4:	42a9      	cmp	r1, r5
   81ba6:	f200 80b3 	bhi.w	81d10 <_malloc_r+0x184>
   81baa:	f000 fb99 	bl	822e0 <__malloc_lock>
   81bae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   81bb2:	d222      	bcs.n	81bfa <_malloc_r+0x6e>
   81bb4:	4fbc      	ldr	r7, [pc, #752]	; (81ea8 <_malloc_r+0x31c>)
   81bb6:	08e8      	lsrs	r0, r5, #3
   81bb8:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   81bbc:	68dc      	ldr	r4, [r3, #12]
   81bbe:	429c      	cmp	r4, r3
   81bc0:	f000 81bc 	beq.w	81f3c <_malloc_r+0x3b0>
   81bc4:	6863      	ldr	r3, [r4, #4]
   81bc6:	68e1      	ldr	r1, [r4, #12]
   81bc8:	f023 0303 	bic.w	r3, r3, #3
   81bcc:	4423      	add	r3, r4
   81bce:	685a      	ldr	r2, [r3, #4]
   81bd0:	68a5      	ldr	r5, [r4, #8]
   81bd2:	f042 0201 	orr.w	r2, r2, #1
   81bd6:	60e9      	str	r1, [r5, #12]
   81bd8:	4630      	mov	r0, r6
   81bda:	608d      	str	r5, [r1, #8]
   81bdc:	605a      	str	r2, [r3, #4]
   81bde:	f000 fb81 	bl	822e4 <__malloc_unlock>
   81be2:	3408      	adds	r4, #8
   81be4:	4620      	mov	r0, r4
   81be6:	b003      	add	sp, #12
   81be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bec:	2910      	cmp	r1, #16
   81bee:	f200 808f 	bhi.w	81d10 <_malloc_r+0x184>
   81bf2:	f000 fb75 	bl	822e0 <__malloc_lock>
   81bf6:	2510      	movs	r5, #16
   81bf8:	e7dc      	b.n	81bb4 <_malloc_r+0x28>
   81bfa:	0a68      	lsrs	r0, r5, #9
   81bfc:	f000 808f 	beq.w	81d1e <_malloc_r+0x192>
   81c00:	2804      	cmp	r0, #4
   81c02:	f200 8147 	bhi.w	81e94 <_malloc_r+0x308>
   81c06:	09a8      	lsrs	r0, r5, #6
   81c08:	3038      	adds	r0, #56	; 0x38
   81c0a:	0041      	lsls	r1, r0, #1
   81c0c:	4fa6      	ldr	r7, [pc, #664]	; (81ea8 <_malloc_r+0x31c>)
   81c0e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   81c12:	68cc      	ldr	r4, [r1, #12]
   81c14:	42a1      	cmp	r1, r4
   81c16:	d106      	bne.n	81c26 <_malloc_r+0x9a>
   81c18:	e00c      	b.n	81c34 <_malloc_r+0xa8>
   81c1a:	2a00      	cmp	r2, #0
   81c1c:	f280 8082 	bge.w	81d24 <_malloc_r+0x198>
   81c20:	68e4      	ldr	r4, [r4, #12]
   81c22:	42a1      	cmp	r1, r4
   81c24:	d006      	beq.n	81c34 <_malloc_r+0xa8>
   81c26:	6863      	ldr	r3, [r4, #4]
   81c28:	f023 0303 	bic.w	r3, r3, #3
   81c2c:	1b5a      	subs	r2, r3, r5
   81c2e:	2a0f      	cmp	r2, #15
   81c30:	ddf3      	ble.n	81c1a <_malloc_r+0x8e>
   81c32:	3801      	subs	r0, #1
   81c34:	3001      	adds	r0, #1
   81c36:	499c      	ldr	r1, [pc, #624]	; (81ea8 <_malloc_r+0x31c>)
   81c38:	693c      	ldr	r4, [r7, #16]
   81c3a:	f101 0e08 	add.w	lr, r1, #8
   81c3e:	4574      	cmp	r4, lr
   81c40:	f000 8171 	beq.w	81f26 <_malloc_r+0x39a>
   81c44:	6863      	ldr	r3, [r4, #4]
   81c46:	f023 0303 	bic.w	r3, r3, #3
   81c4a:	1b5a      	subs	r2, r3, r5
   81c4c:	2a0f      	cmp	r2, #15
   81c4e:	f300 8157 	bgt.w	81f00 <_malloc_r+0x374>
   81c52:	2a00      	cmp	r2, #0
   81c54:	f8c1 e014 	str.w	lr, [r1, #20]
   81c58:	f8c1 e010 	str.w	lr, [r1, #16]
   81c5c:	da66      	bge.n	81d2c <_malloc_r+0x1a0>
   81c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81c62:	f080 812d 	bcs.w	81ec0 <_malloc_r+0x334>
   81c66:	08db      	lsrs	r3, r3, #3
   81c68:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   81c6c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81c70:	684a      	ldr	r2, [r1, #4]
   81c72:	2301      	movs	r3, #1
   81c74:	fa03 f30c 	lsl.w	r3, r3, ip
   81c78:	f8d8 c008 	ldr.w	ip, [r8, #8]
   81c7c:	4313      	orrs	r3, r2
   81c7e:	f8c4 c008 	str.w	ip, [r4, #8]
   81c82:	f8c4 800c 	str.w	r8, [r4, #12]
   81c86:	604b      	str	r3, [r1, #4]
   81c88:	f8c8 4008 	str.w	r4, [r8, #8]
   81c8c:	f8cc 400c 	str.w	r4, [ip, #12]
   81c90:	1082      	asrs	r2, r0, #2
   81c92:	2401      	movs	r4, #1
   81c94:	4094      	lsls	r4, r2
   81c96:	429c      	cmp	r4, r3
   81c98:	d855      	bhi.n	81d46 <_malloc_r+0x1ba>
   81c9a:	4223      	tst	r3, r4
   81c9c:	d106      	bne.n	81cac <_malloc_r+0x120>
   81c9e:	f020 0003 	bic.w	r0, r0, #3
   81ca2:	0064      	lsls	r4, r4, #1
   81ca4:	4223      	tst	r3, r4
   81ca6:	f100 0004 	add.w	r0, r0, #4
   81caa:	d0fa      	beq.n	81ca2 <_malloc_r+0x116>
   81cac:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   81cb0:	46c4      	mov	ip, r8
   81cb2:	4681      	mov	r9, r0
   81cb4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81cb8:	459c      	cmp	ip, r3
   81cba:	d107      	bne.n	81ccc <_malloc_r+0x140>
   81cbc:	e135      	b.n	81f2a <_malloc_r+0x39e>
   81cbe:	2900      	cmp	r1, #0
   81cc0:	f280 8145 	bge.w	81f4e <_malloc_r+0x3c2>
   81cc4:	68db      	ldr	r3, [r3, #12]
   81cc6:	459c      	cmp	ip, r3
   81cc8:	f000 812f 	beq.w	81f2a <_malloc_r+0x39e>
   81ccc:	685a      	ldr	r2, [r3, #4]
   81cce:	f022 0203 	bic.w	r2, r2, #3
   81cd2:	1b51      	subs	r1, r2, r5
   81cd4:	290f      	cmp	r1, #15
   81cd6:	ddf2      	ble.n	81cbe <_malloc_r+0x132>
   81cd8:	461c      	mov	r4, r3
   81cda:	68da      	ldr	r2, [r3, #12]
   81cdc:	f854 cf08 	ldr.w	ip, [r4, #8]!
   81ce0:	f045 0901 	orr.w	r9, r5, #1
   81ce4:	f041 0801 	orr.w	r8, r1, #1
   81ce8:	441d      	add	r5, r3
   81cea:	f8c3 9004 	str.w	r9, [r3, #4]
   81cee:	4630      	mov	r0, r6
   81cf0:	f8cc 200c 	str.w	r2, [ip, #12]
   81cf4:	f8c2 c008 	str.w	ip, [r2, #8]
   81cf8:	617d      	str	r5, [r7, #20]
   81cfa:	613d      	str	r5, [r7, #16]
   81cfc:	f8c5 e00c 	str.w	lr, [r5, #12]
   81d00:	f8c5 e008 	str.w	lr, [r5, #8]
   81d04:	f8c5 8004 	str.w	r8, [r5, #4]
   81d08:	5069      	str	r1, [r5, r1]
   81d0a:	f000 faeb 	bl	822e4 <__malloc_unlock>
   81d0e:	e769      	b.n	81be4 <_malloc_r+0x58>
   81d10:	2400      	movs	r4, #0
   81d12:	4620      	mov	r0, r4
   81d14:	230c      	movs	r3, #12
   81d16:	6033      	str	r3, [r6, #0]
   81d18:	b003      	add	sp, #12
   81d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d1e:	217e      	movs	r1, #126	; 0x7e
   81d20:	203f      	movs	r0, #63	; 0x3f
   81d22:	e773      	b.n	81c0c <_malloc_r+0x80>
   81d24:	4423      	add	r3, r4
   81d26:	685a      	ldr	r2, [r3, #4]
   81d28:	68e1      	ldr	r1, [r4, #12]
   81d2a:	e751      	b.n	81bd0 <_malloc_r+0x44>
   81d2c:	4423      	add	r3, r4
   81d2e:	685a      	ldr	r2, [r3, #4]
   81d30:	4630      	mov	r0, r6
   81d32:	f042 0201 	orr.w	r2, r2, #1
   81d36:	605a      	str	r2, [r3, #4]
   81d38:	3408      	adds	r4, #8
   81d3a:	f000 fad3 	bl	822e4 <__malloc_unlock>
   81d3e:	4620      	mov	r0, r4
   81d40:	b003      	add	sp, #12
   81d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d46:	68bc      	ldr	r4, [r7, #8]
   81d48:	6863      	ldr	r3, [r4, #4]
   81d4a:	f023 0803 	bic.w	r8, r3, #3
   81d4e:	4545      	cmp	r5, r8
   81d50:	d804      	bhi.n	81d5c <_malloc_r+0x1d0>
   81d52:	ebc5 0308 	rsb	r3, r5, r8
   81d56:	2b0f      	cmp	r3, #15
   81d58:	f300 808c 	bgt.w	81e74 <_malloc_r+0x2e8>
   81d5c:	4b53      	ldr	r3, [pc, #332]	; (81eac <_malloc_r+0x320>)
   81d5e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 81ebc <_malloc_r+0x330>
   81d62:	681a      	ldr	r2, [r3, #0]
   81d64:	f8da 3000 	ldr.w	r3, [sl]
   81d68:	442a      	add	r2, r5
   81d6a:	3301      	adds	r3, #1
   81d6c:	eb04 0b08 	add.w	fp, r4, r8
   81d70:	f000 8151 	beq.w	82016 <_malloc_r+0x48a>
   81d74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   81d78:	320f      	adds	r2, #15
   81d7a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   81d7e:	f022 020f 	bic.w	r2, r2, #15
   81d82:	4611      	mov	r1, r2
   81d84:	4630      	mov	r0, r6
   81d86:	9201      	str	r2, [sp, #4]
   81d88:	f000 fc9e 	bl	826c8 <_sbrk_r>
   81d8c:	f1b0 3fff 	cmp.w	r0, #4294967295
   81d90:	4681      	mov	r9, r0
   81d92:	9a01      	ldr	r2, [sp, #4]
   81d94:	f000 8148 	beq.w	82028 <_malloc_r+0x49c>
   81d98:	4583      	cmp	fp, r0
   81d9a:	f200 80ef 	bhi.w	81f7c <_malloc_r+0x3f0>
   81d9e:	4b44      	ldr	r3, [pc, #272]	; (81eb0 <_malloc_r+0x324>)
   81da0:	45cb      	cmp	fp, r9
   81da2:	6819      	ldr	r1, [r3, #0]
   81da4:	4411      	add	r1, r2
   81da6:	6019      	str	r1, [r3, #0]
   81da8:	f000 8143 	beq.w	82032 <_malloc_r+0x4a6>
   81dac:	f8da 0000 	ldr.w	r0, [sl]
   81db0:	f8df e108 	ldr.w	lr, [pc, #264]	; 81ebc <_malloc_r+0x330>
   81db4:	3001      	adds	r0, #1
   81db6:	bf1b      	ittet	ne
   81db8:	ebcb 0b09 	rsbne	fp, fp, r9
   81dbc:	4459      	addne	r1, fp
   81dbe:	f8ce 9000 	streq.w	r9, [lr]
   81dc2:	6019      	strne	r1, [r3, #0]
   81dc4:	f019 0107 	ands.w	r1, r9, #7
   81dc8:	f000 8108 	beq.w	81fdc <_malloc_r+0x450>
   81dcc:	f1c1 0008 	rsb	r0, r1, #8
   81dd0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81dd4:	4481      	add	r9, r0
   81dd6:	3108      	adds	r1, #8
   81dd8:	444a      	add	r2, r9
   81dda:	f3c2 020b 	ubfx	r2, r2, #0, #12
   81dde:	ebc2 0a01 	rsb	sl, r2, r1
   81de2:	4651      	mov	r1, sl
   81de4:	4630      	mov	r0, r6
   81de6:	9301      	str	r3, [sp, #4]
   81de8:	f000 fc6e 	bl	826c8 <_sbrk_r>
   81dec:	1c43      	adds	r3, r0, #1
   81dee:	9b01      	ldr	r3, [sp, #4]
   81df0:	f000 812d 	beq.w	8204e <_malloc_r+0x4c2>
   81df4:	ebc9 0200 	rsb	r2, r9, r0
   81df8:	4452      	add	r2, sl
   81dfa:	f042 0201 	orr.w	r2, r2, #1
   81dfe:	6819      	ldr	r1, [r3, #0]
   81e00:	42bc      	cmp	r4, r7
   81e02:	4451      	add	r1, sl
   81e04:	f8c7 9008 	str.w	r9, [r7, #8]
   81e08:	6019      	str	r1, [r3, #0]
   81e0a:	f8c9 2004 	str.w	r2, [r9, #4]
   81e0e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 81eb0 <_malloc_r+0x324>
   81e12:	d016      	beq.n	81e42 <_malloc_r+0x2b6>
   81e14:	f1b8 0f0f 	cmp.w	r8, #15
   81e18:	f240 80ef 	bls.w	81ffa <_malloc_r+0x46e>
   81e1c:	6862      	ldr	r2, [r4, #4]
   81e1e:	f1a8 030c 	sub.w	r3, r8, #12
   81e22:	f023 0307 	bic.w	r3, r3, #7
   81e26:	f002 0201 	and.w	r2, r2, #1
   81e2a:	18e0      	adds	r0, r4, r3
   81e2c:	f04f 0e05 	mov.w	lr, #5
   81e30:	431a      	orrs	r2, r3
   81e32:	2b0f      	cmp	r3, #15
   81e34:	6062      	str	r2, [r4, #4]
   81e36:	f8c0 e004 	str.w	lr, [r0, #4]
   81e3a:	f8c0 e008 	str.w	lr, [r0, #8]
   81e3e:	f200 810a 	bhi.w	82056 <_malloc_r+0x4ca>
   81e42:	4b1c      	ldr	r3, [pc, #112]	; (81eb4 <_malloc_r+0x328>)
   81e44:	68bc      	ldr	r4, [r7, #8]
   81e46:	681a      	ldr	r2, [r3, #0]
   81e48:	4291      	cmp	r1, r2
   81e4a:	bf88      	it	hi
   81e4c:	6019      	strhi	r1, [r3, #0]
   81e4e:	4b1a      	ldr	r3, [pc, #104]	; (81eb8 <_malloc_r+0x32c>)
   81e50:	681a      	ldr	r2, [r3, #0]
   81e52:	4291      	cmp	r1, r2
   81e54:	6862      	ldr	r2, [r4, #4]
   81e56:	bf88      	it	hi
   81e58:	6019      	strhi	r1, [r3, #0]
   81e5a:	f022 0203 	bic.w	r2, r2, #3
   81e5e:	4295      	cmp	r5, r2
   81e60:	eba2 0305 	sub.w	r3, r2, r5
   81e64:	d801      	bhi.n	81e6a <_malloc_r+0x2de>
   81e66:	2b0f      	cmp	r3, #15
   81e68:	dc04      	bgt.n	81e74 <_malloc_r+0x2e8>
   81e6a:	4630      	mov	r0, r6
   81e6c:	f000 fa3a 	bl	822e4 <__malloc_unlock>
   81e70:	2400      	movs	r4, #0
   81e72:	e6b7      	b.n	81be4 <_malloc_r+0x58>
   81e74:	f045 0201 	orr.w	r2, r5, #1
   81e78:	f043 0301 	orr.w	r3, r3, #1
   81e7c:	4425      	add	r5, r4
   81e7e:	6062      	str	r2, [r4, #4]
   81e80:	4630      	mov	r0, r6
   81e82:	60bd      	str	r5, [r7, #8]
   81e84:	3408      	adds	r4, #8
   81e86:	606b      	str	r3, [r5, #4]
   81e88:	f000 fa2c 	bl	822e4 <__malloc_unlock>
   81e8c:	4620      	mov	r0, r4
   81e8e:	b003      	add	sp, #12
   81e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e94:	2814      	cmp	r0, #20
   81e96:	d969      	bls.n	81f6c <_malloc_r+0x3e0>
   81e98:	2854      	cmp	r0, #84	; 0x54
   81e9a:	f200 8098 	bhi.w	81fce <_malloc_r+0x442>
   81e9e:	0b28      	lsrs	r0, r5, #12
   81ea0:	306e      	adds	r0, #110	; 0x6e
   81ea2:	0041      	lsls	r1, r0, #1
   81ea4:	e6b2      	b.n	81c0c <_malloc_r+0x80>
   81ea6:	bf00      	nop
   81ea8:	20070564 	.word	0x20070564
   81eac:	20070a14 	.word	0x20070a14
   81eb0:	20070a18 	.word	0x20070a18
   81eb4:	20070a10 	.word	0x20070a10
   81eb8:	20070a0c 	.word	0x20070a0c
   81ebc:	20070970 	.word	0x20070970
   81ec0:	0a5a      	lsrs	r2, r3, #9
   81ec2:	2a04      	cmp	r2, #4
   81ec4:	d955      	bls.n	81f72 <_malloc_r+0x3e6>
   81ec6:	2a14      	cmp	r2, #20
   81ec8:	f200 80a7 	bhi.w	8201a <_malloc_r+0x48e>
   81ecc:	325b      	adds	r2, #91	; 0x5b
   81ece:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81ed2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   81ed6:	f8dc 1008 	ldr.w	r1, [ip, #8]
   81eda:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82094 <_malloc_r+0x508>
   81ede:	4561      	cmp	r1, ip
   81ee0:	d07f      	beq.n	81fe2 <_malloc_r+0x456>
   81ee2:	684a      	ldr	r2, [r1, #4]
   81ee4:	f022 0203 	bic.w	r2, r2, #3
   81ee8:	4293      	cmp	r3, r2
   81eea:	d202      	bcs.n	81ef2 <_malloc_r+0x366>
   81eec:	6889      	ldr	r1, [r1, #8]
   81eee:	458c      	cmp	ip, r1
   81ef0:	d1f7      	bne.n	81ee2 <_malloc_r+0x356>
   81ef2:	68ca      	ldr	r2, [r1, #12]
   81ef4:	687b      	ldr	r3, [r7, #4]
   81ef6:	60e2      	str	r2, [r4, #12]
   81ef8:	60a1      	str	r1, [r4, #8]
   81efa:	6094      	str	r4, [r2, #8]
   81efc:	60cc      	str	r4, [r1, #12]
   81efe:	e6c7      	b.n	81c90 <_malloc_r+0x104>
   81f00:	f045 0701 	orr.w	r7, r5, #1
   81f04:	f042 0301 	orr.w	r3, r2, #1
   81f08:	4425      	add	r5, r4
   81f0a:	6067      	str	r7, [r4, #4]
   81f0c:	4630      	mov	r0, r6
   81f0e:	614d      	str	r5, [r1, #20]
   81f10:	610d      	str	r5, [r1, #16]
   81f12:	f8c5 e00c 	str.w	lr, [r5, #12]
   81f16:	f8c5 e008 	str.w	lr, [r5, #8]
   81f1a:	606b      	str	r3, [r5, #4]
   81f1c:	50aa      	str	r2, [r5, r2]
   81f1e:	3408      	adds	r4, #8
   81f20:	f000 f9e0 	bl	822e4 <__malloc_unlock>
   81f24:	e65e      	b.n	81be4 <_malloc_r+0x58>
   81f26:	684b      	ldr	r3, [r1, #4]
   81f28:	e6b2      	b.n	81c90 <_malloc_r+0x104>
   81f2a:	f109 0901 	add.w	r9, r9, #1
   81f2e:	f019 0f03 	tst.w	r9, #3
   81f32:	f10c 0c08 	add.w	ip, ip, #8
   81f36:	f47f aebd 	bne.w	81cb4 <_malloc_r+0x128>
   81f3a:	e02c      	b.n	81f96 <_malloc_r+0x40a>
   81f3c:	f104 0308 	add.w	r3, r4, #8
   81f40:	6964      	ldr	r4, [r4, #20]
   81f42:	42a3      	cmp	r3, r4
   81f44:	bf08      	it	eq
   81f46:	3002      	addeq	r0, #2
   81f48:	f43f ae75 	beq.w	81c36 <_malloc_r+0xaa>
   81f4c:	e63a      	b.n	81bc4 <_malloc_r+0x38>
   81f4e:	461c      	mov	r4, r3
   81f50:	441a      	add	r2, r3
   81f52:	6851      	ldr	r1, [r2, #4]
   81f54:	68db      	ldr	r3, [r3, #12]
   81f56:	f854 5f08 	ldr.w	r5, [r4, #8]!
   81f5a:	f041 0101 	orr.w	r1, r1, #1
   81f5e:	6051      	str	r1, [r2, #4]
   81f60:	4630      	mov	r0, r6
   81f62:	60eb      	str	r3, [r5, #12]
   81f64:	609d      	str	r5, [r3, #8]
   81f66:	f000 f9bd 	bl	822e4 <__malloc_unlock>
   81f6a:	e63b      	b.n	81be4 <_malloc_r+0x58>
   81f6c:	305b      	adds	r0, #91	; 0x5b
   81f6e:	0041      	lsls	r1, r0, #1
   81f70:	e64c      	b.n	81c0c <_malloc_r+0x80>
   81f72:	099a      	lsrs	r2, r3, #6
   81f74:	3238      	adds	r2, #56	; 0x38
   81f76:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   81f7a:	e7aa      	b.n	81ed2 <_malloc_r+0x346>
   81f7c:	42bc      	cmp	r4, r7
   81f7e:	4b45      	ldr	r3, [pc, #276]	; (82094 <_malloc_r+0x508>)
   81f80:	f43f af0d 	beq.w	81d9e <_malloc_r+0x212>
   81f84:	689c      	ldr	r4, [r3, #8]
   81f86:	6862      	ldr	r2, [r4, #4]
   81f88:	f022 0203 	bic.w	r2, r2, #3
   81f8c:	e767      	b.n	81e5e <_malloc_r+0x2d2>
   81f8e:	f8d8 8000 	ldr.w	r8, [r8]
   81f92:	4598      	cmp	r8, r3
   81f94:	d17c      	bne.n	82090 <_malloc_r+0x504>
   81f96:	f010 0f03 	tst.w	r0, #3
   81f9a:	f1a8 0308 	sub.w	r3, r8, #8
   81f9e:	f100 30ff 	add.w	r0, r0, #4294967295
   81fa2:	d1f4      	bne.n	81f8e <_malloc_r+0x402>
   81fa4:	687b      	ldr	r3, [r7, #4]
   81fa6:	ea23 0304 	bic.w	r3, r3, r4
   81faa:	607b      	str	r3, [r7, #4]
   81fac:	0064      	lsls	r4, r4, #1
   81fae:	429c      	cmp	r4, r3
   81fb0:	f63f aec9 	bhi.w	81d46 <_malloc_r+0x1ba>
   81fb4:	2c00      	cmp	r4, #0
   81fb6:	f43f aec6 	beq.w	81d46 <_malloc_r+0x1ba>
   81fba:	4223      	tst	r3, r4
   81fbc:	4648      	mov	r0, r9
   81fbe:	f47f ae75 	bne.w	81cac <_malloc_r+0x120>
   81fc2:	0064      	lsls	r4, r4, #1
   81fc4:	4223      	tst	r3, r4
   81fc6:	f100 0004 	add.w	r0, r0, #4
   81fca:	d0fa      	beq.n	81fc2 <_malloc_r+0x436>
   81fcc:	e66e      	b.n	81cac <_malloc_r+0x120>
   81fce:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   81fd2:	d818      	bhi.n	82006 <_malloc_r+0x47a>
   81fd4:	0be8      	lsrs	r0, r5, #15
   81fd6:	3077      	adds	r0, #119	; 0x77
   81fd8:	0041      	lsls	r1, r0, #1
   81fda:	e617      	b.n	81c0c <_malloc_r+0x80>
   81fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81fe0:	e6fa      	b.n	81dd8 <_malloc_r+0x24c>
   81fe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   81fe6:	1092      	asrs	r2, r2, #2
   81fe8:	f04f 0c01 	mov.w	ip, #1
   81fec:	fa0c f202 	lsl.w	r2, ip, r2
   81ff0:	4313      	orrs	r3, r2
   81ff2:	f8c8 3004 	str.w	r3, [r8, #4]
   81ff6:	460a      	mov	r2, r1
   81ff8:	e77d      	b.n	81ef6 <_malloc_r+0x36a>
   81ffa:	2301      	movs	r3, #1
   81ffc:	f8c9 3004 	str.w	r3, [r9, #4]
   82000:	464c      	mov	r4, r9
   82002:	2200      	movs	r2, #0
   82004:	e72b      	b.n	81e5e <_malloc_r+0x2d2>
   82006:	f240 5354 	movw	r3, #1364	; 0x554
   8200a:	4298      	cmp	r0, r3
   8200c:	d81c      	bhi.n	82048 <_malloc_r+0x4bc>
   8200e:	0ca8      	lsrs	r0, r5, #18
   82010:	307c      	adds	r0, #124	; 0x7c
   82012:	0041      	lsls	r1, r0, #1
   82014:	e5fa      	b.n	81c0c <_malloc_r+0x80>
   82016:	3210      	adds	r2, #16
   82018:	e6b3      	b.n	81d82 <_malloc_r+0x1f6>
   8201a:	2a54      	cmp	r2, #84	; 0x54
   8201c:	d823      	bhi.n	82066 <_malloc_r+0x4da>
   8201e:	0b1a      	lsrs	r2, r3, #12
   82020:	326e      	adds	r2, #110	; 0x6e
   82022:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82026:	e754      	b.n	81ed2 <_malloc_r+0x346>
   82028:	68bc      	ldr	r4, [r7, #8]
   8202a:	6862      	ldr	r2, [r4, #4]
   8202c:	f022 0203 	bic.w	r2, r2, #3
   82030:	e715      	b.n	81e5e <_malloc_r+0x2d2>
   82032:	f3cb 000b 	ubfx	r0, fp, #0, #12
   82036:	2800      	cmp	r0, #0
   82038:	f47f aeb8 	bne.w	81dac <_malloc_r+0x220>
   8203c:	4442      	add	r2, r8
   8203e:	68bb      	ldr	r3, [r7, #8]
   82040:	f042 0201 	orr.w	r2, r2, #1
   82044:	605a      	str	r2, [r3, #4]
   82046:	e6fc      	b.n	81e42 <_malloc_r+0x2b6>
   82048:	21fc      	movs	r1, #252	; 0xfc
   8204a:	207e      	movs	r0, #126	; 0x7e
   8204c:	e5de      	b.n	81c0c <_malloc_r+0x80>
   8204e:	2201      	movs	r2, #1
   82050:	f04f 0a00 	mov.w	sl, #0
   82054:	e6d3      	b.n	81dfe <_malloc_r+0x272>
   82056:	f104 0108 	add.w	r1, r4, #8
   8205a:	4630      	mov	r0, r6
   8205c:	f7ff fa8e 	bl	8157c <_free_r>
   82060:	f8da 1000 	ldr.w	r1, [sl]
   82064:	e6ed      	b.n	81e42 <_malloc_r+0x2b6>
   82066:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8206a:	d804      	bhi.n	82076 <_malloc_r+0x4ea>
   8206c:	0bda      	lsrs	r2, r3, #15
   8206e:	3277      	adds	r2, #119	; 0x77
   82070:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82074:	e72d      	b.n	81ed2 <_malloc_r+0x346>
   82076:	f240 5154 	movw	r1, #1364	; 0x554
   8207a:	428a      	cmp	r2, r1
   8207c:	d804      	bhi.n	82088 <_malloc_r+0x4fc>
   8207e:	0c9a      	lsrs	r2, r3, #18
   82080:	327c      	adds	r2, #124	; 0x7c
   82082:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82086:	e724      	b.n	81ed2 <_malloc_r+0x346>
   82088:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   8208c:	227e      	movs	r2, #126	; 0x7e
   8208e:	e720      	b.n	81ed2 <_malloc_r+0x346>
   82090:	687b      	ldr	r3, [r7, #4]
   82092:	e78b      	b.n	81fac <_malloc_r+0x420>
   82094:	20070564 	.word	0x20070564

00082098 <memchr>:
   82098:	0783      	lsls	r3, r0, #30
   8209a:	b470      	push	{r4, r5, r6}
   8209c:	b2c9      	uxtb	r1, r1
   8209e:	d040      	beq.n	82122 <memchr+0x8a>
   820a0:	1e54      	subs	r4, r2, #1
   820a2:	2a00      	cmp	r2, #0
   820a4:	d03f      	beq.n	82126 <memchr+0x8e>
   820a6:	7803      	ldrb	r3, [r0, #0]
   820a8:	428b      	cmp	r3, r1
   820aa:	bf18      	it	ne
   820ac:	1c43      	addne	r3, r0, #1
   820ae:	d105      	bne.n	820bc <memchr+0x24>
   820b0:	e01c      	b.n	820ec <memchr+0x54>
   820b2:	b1ec      	cbz	r4, 820f0 <memchr+0x58>
   820b4:	7802      	ldrb	r2, [r0, #0]
   820b6:	3c01      	subs	r4, #1
   820b8:	428a      	cmp	r2, r1
   820ba:	d017      	beq.n	820ec <memchr+0x54>
   820bc:	f013 0f03 	tst.w	r3, #3
   820c0:	4618      	mov	r0, r3
   820c2:	f103 0301 	add.w	r3, r3, #1
   820c6:	d1f4      	bne.n	820b2 <memchr+0x1a>
   820c8:	2c03      	cmp	r4, #3
   820ca:	d814      	bhi.n	820f6 <memchr+0x5e>
   820cc:	b184      	cbz	r4, 820f0 <memchr+0x58>
   820ce:	7803      	ldrb	r3, [r0, #0]
   820d0:	428b      	cmp	r3, r1
   820d2:	d00b      	beq.n	820ec <memchr+0x54>
   820d4:	1905      	adds	r5, r0, r4
   820d6:	1c43      	adds	r3, r0, #1
   820d8:	e002      	b.n	820e0 <memchr+0x48>
   820da:	7802      	ldrb	r2, [r0, #0]
   820dc:	428a      	cmp	r2, r1
   820de:	d005      	beq.n	820ec <memchr+0x54>
   820e0:	42ab      	cmp	r3, r5
   820e2:	4618      	mov	r0, r3
   820e4:	f103 0301 	add.w	r3, r3, #1
   820e8:	d1f7      	bne.n	820da <memchr+0x42>
   820ea:	2000      	movs	r0, #0
   820ec:	bc70      	pop	{r4, r5, r6}
   820ee:	4770      	bx	lr
   820f0:	4620      	mov	r0, r4
   820f2:	bc70      	pop	{r4, r5, r6}
   820f4:	4770      	bx	lr
   820f6:	4602      	mov	r2, r0
   820f8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   820fc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   82100:	6813      	ldr	r3, [r2, #0]
   82102:	4610      	mov	r0, r2
   82104:	4073      	eors	r3, r6
   82106:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8210a:	ea25 0303 	bic.w	r3, r5, r3
   8210e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   82112:	f102 0204 	add.w	r2, r2, #4
   82116:	d1d9      	bne.n	820cc <memchr+0x34>
   82118:	3c04      	subs	r4, #4
   8211a:	2c03      	cmp	r4, #3
   8211c:	4610      	mov	r0, r2
   8211e:	d8ef      	bhi.n	82100 <memchr+0x68>
   82120:	e7d4      	b.n	820cc <memchr+0x34>
   82122:	4614      	mov	r4, r2
   82124:	e7d0      	b.n	820c8 <memchr+0x30>
   82126:	4610      	mov	r0, r2
   82128:	e7e0      	b.n	820ec <memchr+0x54>
   8212a:	bf00      	nop

0008212c <memcpy>:
   8212c:	4684      	mov	ip, r0
   8212e:	ea41 0300 	orr.w	r3, r1, r0
   82132:	f013 0303 	ands.w	r3, r3, #3
   82136:	d149      	bne.n	821cc <memcpy+0xa0>
   82138:	3a40      	subs	r2, #64	; 0x40
   8213a:	d323      	bcc.n	82184 <memcpy+0x58>
   8213c:	680b      	ldr	r3, [r1, #0]
   8213e:	6003      	str	r3, [r0, #0]
   82140:	684b      	ldr	r3, [r1, #4]
   82142:	6043      	str	r3, [r0, #4]
   82144:	688b      	ldr	r3, [r1, #8]
   82146:	6083      	str	r3, [r0, #8]
   82148:	68cb      	ldr	r3, [r1, #12]
   8214a:	60c3      	str	r3, [r0, #12]
   8214c:	690b      	ldr	r3, [r1, #16]
   8214e:	6103      	str	r3, [r0, #16]
   82150:	694b      	ldr	r3, [r1, #20]
   82152:	6143      	str	r3, [r0, #20]
   82154:	698b      	ldr	r3, [r1, #24]
   82156:	6183      	str	r3, [r0, #24]
   82158:	69cb      	ldr	r3, [r1, #28]
   8215a:	61c3      	str	r3, [r0, #28]
   8215c:	6a0b      	ldr	r3, [r1, #32]
   8215e:	6203      	str	r3, [r0, #32]
   82160:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82162:	6243      	str	r3, [r0, #36]	; 0x24
   82164:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82166:	6283      	str	r3, [r0, #40]	; 0x28
   82168:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8216a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8216c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8216e:	6303      	str	r3, [r0, #48]	; 0x30
   82170:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82172:	6343      	str	r3, [r0, #52]	; 0x34
   82174:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82176:	6383      	str	r3, [r0, #56]	; 0x38
   82178:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8217a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8217c:	3040      	adds	r0, #64	; 0x40
   8217e:	3140      	adds	r1, #64	; 0x40
   82180:	3a40      	subs	r2, #64	; 0x40
   82182:	d2db      	bcs.n	8213c <memcpy+0x10>
   82184:	3230      	adds	r2, #48	; 0x30
   82186:	d30b      	bcc.n	821a0 <memcpy+0x74>
   82188:	680b      	ldr	r3, [r1, #0]
   8218a:	6003      	str	r3, [r0, #0]
   8218c:	684b      	ldr	r3, [r1, #4]
   8218e:	6043      	str	r3, [r0, #4]
   82190:	688b      	ldr	r3, [r1, #8]
   82192:	6083      	str	r3, [r0, #8]
   82194:	68cb      	ldr	r3, [r1, #12]
   82196:	60c3      	str	r3, [r0, #12]
   82198:	3010      	adds	r0, #16
   8219a:	3110      	adds	r1, #16
   8219c:	3a10      	subs	r2, #16
   8219e:	d2f3      	bcs.n	82188 <memcpy+0x5c>
   821a0:	320c      	adds	r2, #12
   821a2:	d305      	bcc.n	821b0 <memcpy+0x84>
   821a4:	f851 3b04 	ldr.w	r3, [r1], #4
   821a8:	f840 3b04 	str.w	r3, [r0], #4
   821ac:	3a04      	subs	r2, #4
   821ae:	d2f9      	bcs.n	821a4 <memcpy+0x78>
   821b0:	3204      	adds	r2, #4
   821b2:	d008      	beq.n	821c6 <memcpy+0x9a>
   821b4:	07d2      	lsls	r2, r2, #31
   821b6:	bf1c      	itt	ne
   821b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   821bc:	f800 3b01 	strbne.w	r3, [r0], #1
   821c0:	d301      	bcc.n	821c6 <memcpy+0x9a>
   821c2:	880b      	ldrh	r3, [r1, #0]
   821c4:	8003      	strh	r3, [r0, #0]
   821c6:	4660      	mov	r0, ip
   821c8:	4770      	bx	lr
   821ca:	bf00      	nop
   821cc:	2a08      	cmp	r2, #8
   821ce:	d313      	bcc.n	821f8 <memcpy+0xcc>
   821d0:	078b      	lsls	r3, r1, #30
   821d2:	d0b1      	beq.n	82138 <memcpy+0xc>
   821d4:	f010 0303 	ands.w	r3, r0, #3
   821d8:	d0ae      	beq.n	82138 <memcpy+0xc>
   821da:	f1c3 0304 	rsb	r3, r3, #4
   821de:	1ad2      	subs	r2, r2, r3
   821e0:	07db      	lsls	r3, r3, #31
   821e2:	bf1c      	itt	ne
   821e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   821e8:	f800 3b01 	strbne.w	r3, [r0], #1
   821ec:	d3a4      	bcc.n	82138 <memcpy+0xc>
   821ee:	f831 3b02 	ldrh.w	r3, [r1], #2
   821f2:	f820 3b02 	strh.w	r3, [r0], #2
   821f6:	e79f      	b.n	82138 <memcpy+0xc>
   821f8:	3a04      	subs	r2, #4
   821fa:	d3d9      	bcc.n	821b0 <memcpy+0x84>
   821fc:	3a01      	subs	r2, #1
   821fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   82202:	f800 3b01 	strb.w	r3, [r0], #1
   82206:	d2f9      	bcs.n	821fc <memcpy+0xd0>
   82208:	780b      	ldrb	r3, [r1, #0]
   8220a:	7003      	strb	r3, [r0, #0]
   8220c:	784b      	ldrb	r3, [r1, #1]
   8220e:	7043      	strb	r3, [r0, #1]
   82210:	788b      	ldrb	r3, [r1, #2]
   82212:	7083      	strb	r3, [r0, #2]
   82214:	4660      	mov	r0, ip
   82216:	4770      	bx	lr

00082218 <memmove>:
   82218:	4288      	cmp	r0, r1
   8221a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8221c:	d90d      	bls.n	8223a <memmove+0x22>
   8221e:	188b      	adds	r3, r1, r2
   82220:	4298      	cmp	r0, r3
   82222:	d20a      	bcs.n	8223a <memmove+0x22>
   82224:	1881      	adds	r1, r0, r2
   82226:	2a00      	cmp	r2, #0
   82228:	d054      	beq.n	822d4 <memmove+0xbc>
   8222a:	1a9a      	subs	r2, r3, r2
   8222c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   82230:	4293      	cmp	r3, r2
   82232:	f801 4d01 	strb.w	r4, [r1, #-1]!
   82236:	d1f9      	bne.n	8222c <memmove+0x14>
   82238:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8223a:	2a0f      	cmp	r2, #15
   8223c:	d948      	bls.n	822d0 <memmove+0xb8>
   8223e:	ea40 0301 	orr.w	r3, r0, r1
   82242:	079b      	lsls	r3, r3, #30
   82244:	d147      	bne.n	822d6 <memmove+0xbe>
   82246:	4615      	mov	r5, r2
   82248:	f100 0410 	add.w	r4, r0, #16
   8224c:	f101 0310 	add.w	r3, r1, #16
   82250:	f853 6c10 	ldr.w	r6, [r3, #-16]
   82254:	3d10      	subs	r5, #16
   82256:	f844 6c10 	str.w	r6, [r4, #-16]
   8225a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8225e:	2d0f      	cmp	r5, #15
   82260:	f844 6c0c 	str.w	r6, [r4, #-12]
   82264:	f853 6c08 	ldr.w	r6, [r3, #-8]
   82268:	f104 0410 	add.w	r4, r4, #16
   8226c:	f844 6c18 	str.w	r6, [r4, #-24]
   82270:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82274:	f103 0310 	add.w	r3, r3, #16
   82278:	f844 6c14 	str.w	r6, [r4, #-20]
   8227c:	d8e8      	bhi.n	82250 <memmove+0x38>
   8227e:	f1a2 0310 	sub.w	r3, r2, #16
   82282:	f023 030f 	bic.w	r3, r3, #15
   82286:	f002 0e0f 	and.w	lr, r2, #15
   8228a:	3310      	adds	r3, #16
   8228c:	f1be 0f03 	cmp.w	lr, #3
   82290:	4419      	add	r1, r3
   82292:	4403      	add	r3, r0
   82294:	d921      	bls.n	822da <memmove+0xc2>
   82296:	460e      	mov	r6, r1
   82298:	4674      	mov	r4, lr
   8229a:	1f1d      	subs	r5, r3, #4
   8229c:	f856 7b04 	ldr.w	r7, [r6], #4
   822a0:	3c04      	subs	r4, #4
   822a2:	2c03      	cmp	r4, #3
   822a4:	f845 7f04 	str.w	r7, [r5, #4]!
   822a8:	d8f8      	bhi.n	8229c <memmove+0x84>
   822aa:	f1ae 0404 	sub.w	r4, lr, #4
   822ae:	f024 0403 	bic.w	r4, r4, #3
   822b2:	3404      	adds	r4, #4
   822b4:	4423      	add	r3, r4
   822b6:	4421      	add	r1, r4
   822b8:	f002 0203 	and.w	r2, r2, #3
   822bc:	b152      	cbz	r2, 822d4 <memmove+0xbc>
   822be:	3b01      	subs	r3, #1
   822c0:	440a      	add	r2, r1
   822c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   822c6:	4291      	cmp	r1, r2
   822c8:	f803 4f01 	strb.w	r4, [r3, #1]!
   822cc:	d1f9      	bne.n	822c2 <memmove+0xaa>
   822ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822d0:	4603      	mov	r3, r0
   822d2:	e7f3      	b.n	822bc <memmove+0xa4>
   822d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822d6:	4603      	mov	r3, r0
   822d8:	e7f1      	b.n	822be <memmove+0xa6>
   822da:	4672      	mov	r2, lr
   822dc:	e7ee      	b.n	822bc <memmove+0xa4>
   822de:	bf00      	nop

000822e0 <__malloc_lock>:
   822e0:	4770      	bx	lr
   822e2:	bf00      	nop

000822e4 <__malloc_unlock>:
   822e4:	4770      	bx	lr
   822e6:	bf00      	nop

000822e8 <_realloc_r>:
   822e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822ec:	4617      	mov	r7, r2
   822ee:	b083      	sub	sp, #12
   822f0:	460d      	mov	r5, r1
   822f2:	2900      	cmp	r1, #0
   822f4:	f000 80e2 	beq.w	824bc <_realloc_r+0x1d4>
   822f8:	4681      	mov	r9, r0
   822fa:	f107 040b 	add.w	r4, r7, #11
   822fe:	f7ff ffef 	bl	822e0 <__malloc_lock>
   82302:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82306:	2c16      	cmp	r4, #22
   82308:	f023 0603 	bic.w	r6, r3, #3
   8230c:	f1a5 0808 	sub.w	r8, r5, #8
   82310:	d84b      	bhi.n	823aa <_realloc_r+0xc2>
   82312:	2210      	movs	r2, #16
   82314:	4614      	mov	r4, r2
   82316:	42a7      	cmp	r7, r4
   82318:	d84c      	bhi.n	823b4 <_realloc_r+0xcc>
   8231a:	4296      	cmp	r6, r2
   8231c:	da51      	bge.n	823c2 <_realloc_r+0xda>
   8231e:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 826c4 <_realloc_r+0x3dc>
   82322:	eb08 0106 	add.w	r1, r8, r6
   82326:	f8db 0008 	ldr.w	r0, [fp, #8]
   8232a:	4288      	cmp	r0, r1
   8232c:	f000 80d3 	beq.w	824d6 <_realloc_r+0x1ee>
   82330:	6848      	ldr	r0, [r1, #4]
   82332:	f020 0e01 	bic.w	lr, r0, #1
   82336:	448e      	add	lr, r1
   82338:	f8de e004 	ldr.w	lr, [lr, #4]
   8233c:	f01e 0f01 	tst.w	lr, #1
   82340:	d154      	bne.n	823ec <_realloc_r+0x104>
   82342:	f020 0003 	bic.w	r0, r0, #3
   82346:	4430      	add	r0, r6
   82348:	4290      	cmp	r0, r2
   8234a:	f280 80bd 	bge.w	824c8 <_realloc_r+0x1e0>
   8234e:	07db      	lsls	r3, r3, #31
   82350:	f100 8090 	bmi.w	82474 <_realloc_r+0x18c>
   82354:	f855 3c08 	ldr.w	r3, [r5, #-8]
   82358:	ebc3 0a08 	rsb	sl, r3, r8
   8235c:	f8da 3004 	ldr.w	r3, [sl, #4]
   82360:	f023 0303 	bic.w	r3, r3, #3
   82364:	eb00 0e03 	add.w	lr, r0, r3
   82368:	4596      	cmp	lr, r2
   8236a:	db49      	blt.n	82400 <_realloc_r+0x118>
   8236c:	4657      	mov	r7, sl
   8236e:	68cb      	ldr	r3, [r1, #12]
   82370:	6889      	ldr	r1, [r1, #8]
   82372:	1f32      	subs	r2, r6, #4
   82374:	60cb      	str	r3, [r1, #12]
   82376:	6099      	str	r1, [r3, #8]
   82378:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8237c:	f8da 300c 	ldr.w	r3, [sl, #12]
   82380:	2a24      	cmp	r2, #36	; 0x24
   82382:	60cb      	str	r3, [r1, #12]
   82384:	6099      	str	r1, [r3, #8]
   82386:	f200 8133 	bhi.w	825f0 <_realloc_r+0x308>
   8238a:	2a13      	cmp	r2, #19
   8238c:	f240 80fa 	bls.w	82584 <_realloc_r+0x29c>
   82390:	682b      	ldr	r3, [r5, #0]
   82392:	2a1b      	cmp	r2, #27
   82394:	f8ca 3008 	str.w	r3, [sl, #8]
   82398:	686b      	ldr	r3, [r5, #4]
   8239a:	f8ca 300c 	str.w	r3, [sl, #12]
   8239e:	f200 813b 	bhi.w	82618 <_realloc_r+0x330>
   823a2:	3508      	adds	r5, #8
   823a4:	f10a 0310 	add.w	r3, sl, #16
   823a8:	e0ed      	b.n	82586 <_realloc_r+0x29e>
   823aa:	f024 0407 	bic.w	r4, r4, #7
   823ae:	2c00      	cmp	r4, #0
   823b0:	4622      	mov	r2, r4
   823b2:	dab0      	bge.n	82316 <_realloc_r+0x2e>
   823b4:	230c      	movs	r3, #12
   823b6:	2000      	movs	r0, #0
   823b8:	f8c9 3000 	str.w	r3, [r9]
   823bc:	b003      	add	sp, #12
   823be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823c2:	462f      	mov	r7, r5
   823c4:	1b32      	subs	r2, r6, r4
   823c6:	2a0f      	cmp	r2, #15
   823c8:	f003 0301 	and.w	r3, r3, #1
   823cc:	d840      	bhi.n	82450 <_realloc_r+0x168>
   823ce:	4333      	orrs	r3, r6
   823d0:	f8c8 3004 	str.w	r3, [r8, #4]
   823d4:	4446      	add	r6, r8
   823d6:	6873      	ldr	r3, [r6, #4]
   823d8:	f043 0301 	orr.w	r3, r3, #1
   823dc:	6073      	str	r3, [r6, #4]
   823de:	4648      	mov	r0, r9
   823e0:	f7ff ff80 	bl	822e4 <__malloc_unlock>
   823e4:	4638      	mov	r0, r7
   823e6:	b003      	add	sp, #12
   823e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823ec:	07d9      	lsls	r1, r3, #31
   823ee:	d441      	bmi.n	82474 <_realloc_r+0x18c>
   823f0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   823f4:	ebc3 0a08 	rsb	sl, r3, r8
   823f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   823fc:	f023 0303 	bic.w	r3, r3, #3
   82400:	4433      	add	r3, r6
   82402:	4293      	cmp	r3, r2
   82404:	db36      	blt.n	82474 <_realloc_r+0x18c>
   82406:	4657      	mov	r7, sl
   82408:	f8da 100c 	ldr.w	r1, [sl, #12]
   8240c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   82410:	1f32      	subs	r2, r6, #4
   82412:	2a24      	cmp	r2, #36	; 0x24
   82414:	60c1      	str	r1, [r0, #12]
   82416:	6088      	str	r0, [r1, #8]
   82418:	f200 80f5 	bhi.w	82606 <_realloc_r+0x31e>
   8241c:	2a13      	cmp	r2, #19
   8241e:	f240 80f0 	bls.w	82602 <_realloc_r+0x31a>
   82422:	6829      	ldr	r1, [r5, #0]
   82424:	2a1b      	cmp	r2, #27
   82426:	f8ca 1008 	str.w	r1, [sl, #8]
   8242a:	6869      	ldr	r1, [r5, #4]
   8242c:	f8ca 100c 	str.w	r1, [sl, #12]
   82430:	f200 8107 	bhi.w	82642 <_realloc_r+0x35a>
   82434:	3508      	adds	r5, #8
   82436:	f10a 0210 	add.w	r2, sl, #16
   8243a:	6829      	ldr	r1, [r5, #0]
   8243c:	461e      	mov	r6, r3
   8243e:	6011      	str	r1, [r2, #0]
   82440:	6869      	ldr	r1, [r5, #4]
   82442:	46d0      	mov	r8, sl
   82444:	6051      	str	r1, [r2, #4]
   82446:	68ab      	ldr	r3, [r5, #8]
   82448:	6093      	str	r3, [r2, #8]
   8244a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8244e:	e7b9      	b.n	823c4 <_realloc_r+0xdc>
   82450:	eb08 0104 	add.w	r1, r8, r4
   82454:	4323      	orrs	r3, r4
   82456:	f042 0001 	orr.w	r0, r2, #1
   8245a:	f8c8 3004 	str.w	r3, [r8, #4]
   8245e:	440a      	add	r2, r1
   82460:	6048      	str	r0, [r1, #4]
   82462:	6853      	ldr	r3, [r2, #4]
   82464:	3108      	adds	r1, #8
   82466:	f043 0301 	orr.w	r3, r3, #1
   8246a:	6053      	str	r3, [r2, #4]
   8246c:	4648      	mov	r0, r9
   8246e:	f7ff f885 	bl	8157c <_free_r>
   82472:	e7b4      	b.n	823de <_realloc_r+0xf6>
   82474:	4639      	mov	r1, r7
   82476:	4648      	mov	r0, r9
   82478:	f7ff fb88 	bl	81b8c <_malloc_r>
   8247c:	4607      	mov	r7, r0
   8247e:	2800      	cmp	r0, #0
   82480:	d0ad      	beq.n	823de <_realloc_r+0xf6>
   82482:	f855 3c04 	ldr.w	r3, [r5, #-4]
   82486:	f1a0 0108 	sub.w	r1, r0, #8
   8248a:	f023 0201 	bic.w	r2, r3, #1
   8248e:	4442      	add	r2, r8
   82490:	4291      	cmp	r1, r2
   82492:	f000 80a6 	beq.w	825e2 <_realloc_r+0x2fa>
   82496:	1f32      	subs	r2, r6, #4
   82498:	2a24      	cmp	r2, #36	; 0x24
   8249a:	f200 8093 	bhi.w	825c4 <_realloc_r+0x2dc>
   8249e:	2a13      	cmp	r2, #19
   824a0:	d865      	bhi.n	8256e <_realloc_r+0x286>
   824a2:	4603      	mov	r3, r0
   824a4:	462a      	mov	r2, r5
   824a6:	6811      	ldr	r1, [r2, #0]
   824a8:	6019      	str	r1, [r3, #0]
   824aa:	6851      	ldr	r1, [r2, #4]
   824ac:	6059      	str	r1, [r3, #4]
   824ae:	6892      	ldr	r2, [r2, #8]
   824b0:	609a      	str	r2, [r3, #8]
   824b2:	4629      	mov	r1, r5
   824b4:	4648      	mov	r0, r9
   824b6:	f7ff f861 	bl	8157c <_free_r>
   824ba:	e790      	b.n	823de <_realloc_r+0xf6>
   824bc:	4611      	mov	r1, r2
   824be:	b003      	add	sp, #12
   824c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   824c4:	f7ff bb62 	b.w	81b8c <_malloc_r>
   824c8:	68ca      	ldr	r2, [r1, #12]
   824ca:	6889      	ldr	r1, [r1, #8]
   824cc:	462f      	mov	r7, r5
   824ce:	60ca      	str	r2, [r1, #12]
   824d0:	4606      	mov	r6, r0
   824d2:	6091      	str	r1, [r2, #8]
   824d4:	e776      	b.n	823c4 <_realloc_r+0xdc>
   824d6:	6841      	ldr	r1, [r0, #4]
   824d8:	f104 0010 	add.w	r0, r4, #16
   824dc:	f021 0103 	bic.w	r1, r1, #3
   824e0:	4431      	add	r1, r6
   824e2:	4281      	cmp	r1, r0
   824e4:	da5a      	bge.n	8259c <_realloc_r+0x2b4>
   824e6:	07db      	lsls	r3, r3, #31
   824e8:	d4c4      	bmi.n	82474 <_realloc_r+0x18c>
   824ea:	f855 3c08 	ldr.w	r3, [r5, #-8]
   824ee:	ebc3 0a08 	rsb	sl, r3, r8
   824f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   824f6:	f023 0303 	bic.w	r3, r3, #3
   824fa:	eb01 0c03 	add.w	ip, r1, r3
   824fe:	4560      	cmp	r0, ip
   82500:	f73f af7e 	bgt.w	82400 <_realloc_r+0x118>
   82504:	4657      	mov	r7, sl
   82506:	f8da 300c 	ldr.w	r3, [sl, #12]
   8250a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8250e:	1f32      	subs	r2, r6, #4
   82510:	2a24      	cmp	r2, #36	; 0x24
   82512:	60cb      	str	r3, [r1, #12]
   82514:	6099      	str	r1, [r3, #8]
   82516:	f200 80b6 	bhi.w	82686 <_realloc_r+0x39e>
   8251a:	2a13      	cmp	r2, #19
   8251c:	f240 80a7 	bls.w	8266e <_realloc_r+0x386>
   82520:	682b      	ldr	r3, [r5, #0]
   82522:	2a1b      	cmp	r2, #27
   82524:	f8ca 3008 	str.w	r3, [sl, #8]
   82528:	686b      	ldr	r3, [r5, #4]
   8252a:	f8ca 300c 	str.w	r3, [sl, #12]
   8252e:	f200 80b3 	bhi.w	82698 <_realloc_r+0x3b0>
   82532:	3508      	adds	r5, #8
   82534:	f10a 0310 	add.w	r3, sl, #16
   82538:	682a      	ldr	r2, [r5, #0]
   8253a:	601a      	str	r2, [r3, #0]
   8253c:	686a      	ldr	r2, [r5, #4]
   8253e:	605a      	str	r2, [r3, #4]
   82540:	68aa      	ldr	r2, [r5, #8]
   82542:	609a      	str	r2, [r3, #8]
   82544:	ebc4 030c 	rsb	r3, r4, ip
   82548:	eb0a 0204 	add.w	r2, sl, r4
   8254c:	f043 0301 	orr.w	r3, r3, #1
   82550:	f8cb 2008 	str.w	r2, [fp, #8]
   82554:	6053      	str	r3, [r2, #4]
   82556:	f8da 3004 	ldr.w	r3, [sl, #4]
   8255a:	4648      	mov	r0, r9
   8255c:	f003 0301 	and.w	r3, r3, #1
   82560:	431c      	orrs	r4, r3
   82562:	f8ca 4004 	str.w	r4, [sl, #4]
   82566:	f7ff febd 	bl	822e4 <__malloc_unlock>
   8256a:	4638      	mov	r0, r7
   8256c:	e73b      	b.n	823e6 <_realloc_r+0xfe>
   8256e:	682b      	ldr	r3, [r5, #0]
   82570:	2a1b      	cmp	r2, #27
   82572:	6003      	str	r3, [r0, #0]
   82574:	686b      	ldr	r3, [r5, #4]
   82576:	6043      	str	r3, [r0, #4]
   82578:	d828      	bhi.n	825cc <_realloc_r+0x2e4>
   8257a:	f100 0308 	add.w	r3, r0, #8
   8257e:	f105 0208 	add.w	r2, r5, #8
   82582:	e790      	b.n	824a6 <_realloc_r+0x1be>
   82584:	463b      	mov	r3, r7
   82586:	682a      	ldr	r2, [r5, #0]
   82588:	4676      	mov	r6, lr
   8258a:	601a      	str	r2, [r3, #0]
   8258c:	686a      	ldr	r2, [r5, #4]
   8258e:	46d0      	mov	r8, sl
   82590:	605a      	str	r2, [r3, #4]
   82592:	68aa      	ldr	r2, [r5, #8]
   82594:	609a      	str	r2, [r3, #8]
   82596:	f8da 3004 	ldr.w	r3, [sl, #4]
   8259a:	e713      	b.n	823c4 <_realloc_r+0xdc>
   8259c:	1b0b      	subs	r3, r1, r4
   8259e:	eb08 0204 	add.w	r2, r8, r4
   825a2:	f043 0301 	orr.w	r3, r3, #1
   825a6:	f8cb 2008 	str.w	r2, [fp, #8]
   825aa:	6053      	str	r3, [r2, #4]
   825ac:	f855 3c04 	ldr.w	r3, [r5, #-4]
   825b0:	4648      	mov	r0, r9
   825b2:	f003 0301 	and.w	r3, r3, #1
   825b6:	431c      	orrs	r4, r3
   825b8:	f845 4c04 	str.w	r4, [r5, #-4]
   825bc:	f7ff fe92 	bl	822e4 <__malloc_unlock>
   825c0:	4628      	mov	r0, r5
   825c2:	e710      	b.n	823e6 <_realloc_r+0xfe>
   825c4:	4629      	mov	r1, r5
   825c6:	f7ff fe27 	bl	82218 <memmove>
   825ca:	e772      	b.n	824b2 <_realloc_r+0x1ca>
   825cc:	68ab      	ldr	r3, [r5, #8]
   825ce:	2a24      	cmp	r2, #36	; 0x24
   825d0:	6083      	str	r3, [r0, #8]
   825d2:	68eb      	ldr	r3, [r5, #12]
   825d4:	60c3      	str	r3, [r0, #12]
   825d6:	d02b      	beq.n	82630 <_realloc_r+0x348>
   825d8:	f100 0310 	add.w	r3, r0, #16
   825dc:	f105 0210 	add.w	r2, r5, #16
   825e0:	e761      	b.n	824a6 <_realloc_r+0x1be>
   825e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   825e6:	462f      	mov	r7, r5
   825e8:	f022 0203 	bic.w	r2, r2, #3
   825ec:	4416      	add	r6, r2
   825ee:	e6e9      	b.n	823c4 <_realloc_r+0xdc>
   825f0:	4629      	mov	r1, r5
   825f2:	4638      	mov	r0, r7
   825f4:	4676      	mov	r6, lr
   825f6:	46d0      	mov	r8, sl
   825f8:	f7ff fe0e 	bl	82218 <memmove>
   825fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   82600:	e6e0      	b.n	823c4 <_realloc_r+0xdc>
   82602:	463a      	mov	r2, r7
   82604:	e719      	b.n	8243a <_realloc_r+0x152>
   82606:	4629      	mov	r1, r5
   82608:	4638      	mov	r0, r7
   8260a:	461e      	mov	r6, r3
   8260c:	46d0      	mov	r8, sl
   8260e:	f7ff fe03 	bl	82218 <memmove>
   82612:	f8da 3004 	ldr.w	r3, [sl, #4]
   82616:	e6d5      	b.n	823c4 <_realloc_r+0xdc>
   82618:	68ab      	ldr	r3, [r5, #8]
   8261a:	2a24      	cmp	r2, #36	; 0x24
   8261c:	f8ca 3010 	str.w	r3, [sl, #16]
   82620:	68eb      	ldr	r3, [r5, #12]
   82622:	f8ca 3014 	str.w	r3, [sl, #20]
   82626:	d018      	beq.n	8265a <_realloc_r+0x372>
   82628:	3510      	adds	r5, #16
   8262a:	f10a 0318 	add.w	r3, sl, #24
   8262e:	e7aa      	b.n	82586 <_realloc_r+0x29e>
   82630:	692a      	ldr	r2, [r5, #16]
   82632:	f100 0318 	add.w	r3, r0, #24
   82636:	6102      	str	r2, [r0, #16]
   82638:	6969      	ldr	r1, [r5, #20]
   8263a:	f105 0218 	add.w	r2, r5, #24
   8263e:	6141      	str	r1, [r0, #20]
   82640:	e731      	b.n	824a6 <_realloc_r+0x1be>
   82642:	68a9      	ldr	r1, [r5, #8]
   82644:	2a24      	cmp	r2, #36	; 0x24
   82646:	f8ca 1010 	str.w	r1, [sl, #16]
   8264a:	68e9      	ldr	r1, [r5, #12]
   8264c:	f8ca 1014 	str.w	r1, [sl, #20]
   82650:	d00f      	beq.n	82672 <_realloc_r+0x38a>
   82652:	3510      	adds	r5, #16
   82654:	f10a 0218 	add.w	r2, sl, #24
   82658:	e6ef      	b.n	8243a <_realloc_r+0x152>
   8265a:	692a      	ldr	r2, [r5, #16]
   8265c:	f10a 0320 	add.w	r3, sl, #32
   82660:	f8ca 2018 	str.w	r2, [sl, #24]
   82664:	696a      	ldr	r2, [r5, #20]
   82666:	3518      	adds	r5, #24
   82668:	f8ca 201c 	str.w	r2, [sl, #28]
   8266c:	e78b      	b.n	82586 <_realloc_r+0x29e>
   8266e:	463b      	mov	r3, r7
   82670:	e762      	b.n	82538 <_realloc_r+0x250>
   82672:	6929      	ldr	r1, [r5, #16]
   82674:	f10a 0220 	add.w	r2, sl, #32
   82678:	f8ca 1018 	str.w	r1, [sl, #24]
   8267c:	6969      	ldr	r1, [r5, #20]
   8267e:	3518      	adds	r5, #24
   82680:	f8ca 101c 	str.w	r1, [sl, #28]
   82684:	e6d9      	b.n	8243a <_realloc_r+0x152>
   82686:	4629      	mov	r1, r5
   82688:	4638      	mov	r0, r7
   8268a:	f8cd c004 	str.w	ip, [sp, #4]
   8268e:	f7ff fdc3 	bl	82218 <memmove>
   82692:	f8dd c004 	ldr.w	ip, [sp, #4]
   82696:	e755      	b.n	82544 <_realloc_r+0x25c>
   82698:	68ab      	ldr	r3, [r5, #8]
   8269a:	2a24      	cmp	r2, #36	; 0x24
   8269c:	f8ca 3010 	str.w	r3, [sl, #16]
   826a0:	68eb      	ldr	r3, [r5, #12]
   826a2:	f8ca 3014 	str.w	r3, [sl, #20]
   826a6:	d003      	beq.n	826b0 <_realloc_r+0x3c8>
   826a8:	3510      	adds	r5, #16
   826aa:	f10a 0318 	add.w	r3, sl, #24
   826ae:	e743      	b.n	82538 <_realloc_r+0x250>
   826b0:	692a      	ldr	r2, [r5, #16]
   826b2:	f10a 0320 	add.w	r3, sl, #32
   826b6:	f8ca 2018 	str.w	r2, [sl, #24]
   826ba:	696a      	ldr	r2, [r5, #20]
   826bc:	3518      	adds	r5, #24
   826be:	f8ca 201c 	str.w	r2, [sl, #28]
   826c2:	e739      	b.n	82538 <_realloc_r+0x250>
   826c4:	20070564 	.word	0x20070564

000826c8 <_sbrk_r>:
   826c8:	b538      	push	{r3, r4, r5, lr}
   826ca:	4c07      	ldr	r4, [pc, #28]	; (826e8 <_sbrk_r+0x20>)
   826cc:	2300      	movs	r3, #0
   826ce:	4605      	mov	r5, r0
   826d0:	4608      	mov	r0, r1
   826d2:	6023      	str	r3, [r4, #0]
   826d4:	f7fe fa1c 	bl	80b10 <_sbrk>
   826d8:	1c43      	adds	r3, r0, #1
   826da:	d000      	beq.n	826de <_sbrk_r+0x16>
   826dc:	bd38      	pop	{r3, r4, r5, pc}
   826de:	6823      	ldr	r3, [r4, #0]
   826e0:	2b00      	cmp	r3, #0
   826e2:	d0fb      	beq.n	826dc <_sbrk_r+0x14>
   826e4:	602b      	str	r3, [r5, #0]
   826e6:	bd38      	pop	{r3, r4, r5, pc}
   826e8:	20070a74 	.word	0x20070a74

000826ec <__sread>:
   826ec:	b510      	push	{r4, lr}
   826ee:	460c      	mov	r4, r1
   826f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   826f4:	f000 f930 	bl	82958 <_read_r>
   826f8:	2800      	cmp	r0, #0
   826fa:	db03      	blt.n	82704 <__sread+0x18>
   826fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   826fe:	4403      	add	r3, r0
   82700:	6523      	str	r3, [r4, #80]	; 0x50
   82702:	bd10      	pop	{r4, pc}
   82704:	89a3      	ldrh	r3, [r4, #12]
   82706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8270a:	81a3      	strh	r3, [r4, #12]
   8270c:	bd10      	pop	{r4, pc}
   8270e:	bf00      	nop

00082710 <__swrite>:
   82710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82714:	460c      	mov	r4, r1
   82716:	8989      	ldrh	r1, [r1, #12]
   82718:	461d      	mov	r5, r3
   8271a:	05cb      	lsls	r3, r1, #23
   8271c:	4616      	mov	r6, r2
   8271e:	4607      	mov	r7, r0
   82720:	d506      	bpl.n	82730 <__swrite+0x20>
   82722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82726:	2200      	movs	r2, #0
   82728:	2302      	movs	r3, #2
   8272a:	f000 f901 	bl	82930 <_lseek_r>
   8272e:	89a1      	ldrh	r1, [r4, #12]
   82730:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82734:	81a1      	strh	r1, [r4, #12]
   82736:	4638      	mov	r0, r7
   82738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8273c:	4632      	mov	r2, r6
   8273e:	462b      	mov	r3, r5
   82740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82744:	f000 b814 	b.w	82770 <_write_r>

00082748 <__sseek>:
   82748:	b510      	push	{r4, lr}
   8274a:	460c      	mov	r4, r1
   8274c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82750:	f000 f8ee 	bl	82930 <_lseek_r>
   82754:	89a3      	ldrh	r3, [r4, #12]
   82756:	1c42      	adds	r2, r0, #1
   82758:	bf0e      	itee	eq
   8275a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8275e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82762:	6520      	strne	r0, [r4, #80]	; 0x50
   82764:	81a3      	strh	r3, [r4, #12]
   82766:	bd10      	pop	{r4, pc}

00082768 <__sclose>:
   82768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8276c:	f000 b866 	b.w	8283c <_close_r>

00082770 <_write_r>:
   82770:	b570      	push	{r4, r5, r6, lr}
   82772:	4c08      	ldr	r4, [pc, #32]	; (82794 <_write_r+0x24>)
   82774:	4606      	mov	r6, r0
   82776:	2500      	movs	r5, #0
   82778:	4608      	mov	r0, r1
   8277a:	4611      	mov	r1, r2
   8277c:	461a      	mov	r2, r3
   8277e:	6025      	str	r5, [r4, #0]
   82780:	f7fd fd36 	bl	801f0 <_write>
   82784:	1c43      	adds	r3, r0, #1
   82786:	d000      	beq.n	8278a <_write_r+0x1a>
   82788:	bd70      	pop	{r4, r5, r6, pc}
   8278a:	6823      	ldr	r3, [r4, #0]
   8278c:	2b00      	cmp	r3, #0
   8278e:	d0fb      	beq.n	82788 <_write_r+0x18>
   82790:	6033      	str	r3, [r6, #0]
   82792:	bd70      	pop	{r4, r5, r6, pc}
   82794:	20070a74 	.word	0x20070a74

00082798 <__register_exitproc>:
   82798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8279c:	4c25      	ldr	r4, [pc, #148]	; (82834 <__register_exitproc+0x9c>)
   8279e:	4606      	mov	r6, r0
   827a0:	6825      	ldr	r5, [r4, #0]
   827a2:	4688      	mov	r8, r1
   827a4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   827a8:	4692      	mov	sl, r2
   827aa:	4699      	mov	r9, r3
   827ac:	b3c4      	cbz	r4, 82820 <__register_exitproc+0x88>
   827ae:	6860      	ldr	r0, [r4, #4]
   827b0:	281f      	cmp	r0, #31
   827b2:	dc17      	bgt.n	827e4 <__register_exitproc+0x4c>
   827b4:	1c41      	adds	r1, r0, #1
   827b6:	b176      	cbz	r6, 827d6 <__register_exitproc+0x3e>
   827b8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   827bc:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   827c0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   827c4:	2201      	movs	r2, #1
   827c6:	4082      	lsls	r2, r0
   827c8:	4315      	orrs	r5, r2
   827ca:	2e02      	cmp	r6, #2
   827cc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   827d0:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   827d4:	d01e      	beq.n	82814 <__register_exitproc+0x7c>
   827d6:	1c83      	adds	r3, r0, #2
   827d8:	6061      	str	r1, [r4, #4]
   827da:	2000      	movs	r0, #0
   827dc:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   827e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   827e4:	4b14      	ldr	r3, [pc, #80]	; (82838 <__register_exitproc+0xa0>)
   827e6:	b303      	cbz	r3, 8282a <__register_exitproc+0x92>
   827e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   827ec:	f7ff f9c6 	bl	81b7c <malloc>
   827f0:	4604      	mov	r4, r0
   827f2:	b1d0      	cbz	r0, 8282a <__register_exitproc+0x92>
   827f4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   827f8:	2700      	movs	r7, #0
   827fa:	e884 0088 	stmia.w	r4, {r3, r7}
   827fe:	4638      	mov	r0, r7
   82800:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   82804:	2101      	movs	r1, #1
   82806:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8280a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8280e:	2e00      	cmp	r6, #0
   82810:	d0e1      	beq.n	827d6 <__register_exitproc+0x3e>
   82812:	e7d1      	b.n	827b8 <__register_exitproc+0x20>
   82814:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82818:	431a      	orrs	r2, r3
   8281a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8281e:	e7da      	b.n	827d6 <__register_exitproc+0x3e>
   82820:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   82824:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   82828:	e7c1      	b.n	827ae <__register_exitproc+0x16>
   8282a:	f04f 30ff 	mov.w	r0, #4294967295
   8282e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82832:	bf00      	nop
   82834:	00082a04 	.word	0x00082a04
   82838:	00081b7d 	.word	0x00081b7d

0008283c <_close_r>:
   8283c:	b538      	push	{r3, r4, r5, lr}
   8283e:	4c07      	ldr	r4, [pc, #28]	; (8285c <_close_r+0x20>)
   82840:	2300      	movs	r3, #0
   82842:	4605      	mov	r5, r0
   82844:	4608      	mov	r0, r1
   82846:	6023      	str	r3, [r4, #0]
   82848:	f7fe f97c 	bl	80b44 <_close>
   8284c:	1c43      	adds	r3, r0, #1
   8284e:	d000      	beq.n	82852 <_close_r+0x16>
   82850:	bd38      	pop	{r3, r4, r5, pc}
   82852:	6823      	ldr	r3, [r4, #0]
   82854:	2b00      	cmp	r3, #0
   82856:	d0fb      	beq.n	82850 <_close_r+0x14>
   82858:	602b      	str	r3, [r5, #0]
   8285a:	bd38      	pop	{r3, r4, r5, pc}
   8285c:	20070a74 	.word	0x20070a74

00082860 <_fclose_r>:
   82860:	2900      	cmp	r1, #0
   82862:	d03d      	beq.n	828e0 <_fclose_r+0x80>
   82864:	b570      	push	{r4, r5, r6, lr}
   82866:	4605      	mov	r5, r0
   82868:	460c      	mov	r4, r1
   8286a:	b108      	cbz	r0, 82870 <_fclose_r+0x10>
   8286c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8286e:	b37b      	cbz	r3, 828d0 <_fclose_r+0x70>
   82870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82874:	b90b      	cbnz	r3, 8287a <_fclose_r+0x1a>
   82876:	2000      	movs	r0, #0
   82878:	bd70      	pop	{r4, r5, r6, pc}
   8287a:	4628      	mov	r0, r5
   8287c:	4621      	mov	r1, r4
   8287e:	f7fe fcd7 	bl	81230 <__sflush_r>
   82882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82884:	4606      	mov	r6, r0
   82886:	b133      	cbz	r3, 82896 <_fclose_r+0x36>
   82888:	4628      	mov	r0, r5
   8288a:	69e1      	ldr	r1, [r4, #28]
   8288c:	4798      	blx	r3
   8288e:	2800      	cmp	r0, #0
   82890:	bfb8      	it	lt
   82892:	f04f 36ff 	movlt.w	r6, #4294967295
   82896:	89a3      	ldrh	r3, [r4, #12]
   82898:	061b      	lsls	r3, r3, #24
   8289a:	d41c      	bmi.n	828d6 <_fclose_r+0x76>
   8289c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8289e:	b141      	cbz	r1, 828b2 <_fclose_r+0x52>
   828a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   828a4:	4299      	cmp	r1, r3
   828a6:	d002      	beq.n	828ae <_fclose_r+0x4e>
   828a8:	4628      	mov	r0, r5
   828aa:	f7fe fe67 	bl	8157c <_free_r>
   828ae:	2300      	movs	r3, #0
   828b0:	6323      	str	r3, [r4, #48]	; 0x30
   828b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   828b4:	b121      	cbz	r1, 828c0 <_fclose_r+0x60>
   828b6:	4628      	mov	r0, r5
   828b8:	f7fe fe60 	bl	8157c <_free_r>
   828bc:	2300      	movs	r3, #0
   828be:	6463      	str	r3, [r4, #68]	; 0x44
   828c0:	f7fe fdf4 	bl	814ac <__sfp_lock_acquire>
   828c4:	2300      	movs	r3, #0
   828c6:	81a3      	strh	r3, [r4, #12]
   828c8:	f7fe fdf2 	bl	814b0 <__sfp_lock_release>
   828cc:	4630      	mov	r0, r6
   828ce:	bd70      	pop	{r4, r5, r6, pc}
   828d0:	f7fe fde6 	bl	814a0 <__sinit>
   828d4:	e7cc      	b.n	82870 <_fclose_r+0x10>
   828d6:	4628      	mov	r0, r5
   828d8:	6921      	ldr	r1, [r4, #16]
   828da:	f7fe fe4f 	bl	8157c <_free_r>
   828de:	e7dd      	b.n	8289c <_fclose_r+0x3c>
   828e0:	2000      	movs	r0, #0
   828e2:	4770      	bx	lr

000828e4 <_fstat_r>:
   828e4:	b538      	push	{r3, r4, r5, lr}
   828e6:	4c08      	ldr	r4, [pc, #32]	; (82908 <_fstat_r+0x24>)
   828e8:	2300      	movs	r3, #0
   828ea:	4605      	mov	r5, r0
   828ec:	4608      	mov	r0, r1
   828ee:	4611      	mov	r1, r2
   828f0:	6023      	str	r3, [r4, #0]
   828f2:	f7fe f92b 	bl	80b4c <_fstat>
   828f6:	1c43      	adds	r3, r0, #1
   828f8:	d000      	beq.n	828fc <_fstat_r+0x18>
   828fa:	bd38      	pop	{r3, r4, r5, pc}
   828fc:	6823      	ldr	r3, [r4, #0]
   828fe:	2b00      	cmp	r3, #0
   82900:	d0fb      	beq.n	828fa <_fstat_r+0x16>
   82902:	602b      	str	r3, [r5, #0]
   82904:	bd38      	pop	{r3, r4, r5, pc}
   82906:	bf00      	nop
   82908:	20070a74 	.word	0x20070a74

0008290c <_isatty_r>:
   8290c:	b538      	push	{r3, r4, r5, lr}
   8290e:	4c07      	ldr	r4, [pc, #28]	; (8292c <_isatty_r+0x20>)
   82910:	2300      	movs	r3, #0
   82912:	4605      	mov	r5, r0
   82914:	4608      	mov	r0, r1
   82916:	6023      	str	r3, [r4, #0]
   82918:	f7fe f91e 	bl	80b58 <_isatty>
   8291c:	1c43      	adds	r3, r0, #1
   8291e:	d000      	beq.n	82922 <_isatty_r+0x16>
   82920:	bd38      	pop	{r3, r4, r5, pc}
   82922:	6823      	ldr	r3, [r4, #0]
   82924:	2b00      	cmp	r3, #0
   82926:	d0fb      	beq.n	82920 <_isatty_r+0x14>
   82928:	602b      	str	r3, [r5, #0]
   8292a:	bd38      	pop	{r3, r4, r5, pc}
   8292c:	20070a74 	.word	0x20070a74

00082930 <_lseek_r>:
   82930:	b570      	push	{r4, r5, r6, lr}
   82932:	4c08      	ldr	r4, [pc, #32]	; (82954 <_lseek_r+0x24>)
   82934:	4606      	mov	r6, r0
   82936:	2500      	movs	r5, #0
   82938:	4608      	mov	r0, r1
   8293a:	4611      	mov	r1, r2
   8293c:	461a      	mov	r2, r3
   8293e:	6025      	str	r5, [r4, #0]
   82940:	f7fe f90c 	bl	80b5c <_lseek>
   82944:	1c43      	adds	r3, r0, #1
   82946:	d000      	beq.n	8294a <_lseek_r+0x1a>
   82948:	bd70      	pop	{r4, r5, r6, pc}
   8294a:	6823      	ldr	r3, [r4, #0]
   8294c:	2b00      	cmp	r3, #0
   8294e:	d0fb      	beq.n	82948 <_lseek_r+0x18>
   82950:	6033      	str	r3, [r6, #0]
   82952:	bd70      	pop	{r4, r5, r6, pc}
   82954:	20070a74 	.word	0x20070a74

00082958 <_read_r>:
   82958:	b570      	push	{r4, r5, r6, lr}
   8295a:	4c08      	ldr	r4, [pc, #32]	; (8297c <_read_r+0x24>)
   8295c:	4606      	mov	r6, r0
   8295e:	2500      	movs	r5, #0
   82960:	4608      	mov	r0, r1
   82962:	4611      	mov	r1, r2
   82964:	461a      	mov	r2, r3
   82966:	6025      	str	r5, [r4, #0]
   82968:	f7fd fc24 	bl	801b4 <_read>
   8296c:	1c43      	adds	r3, r0, #1
   8296e:	d000      	beq.n	82972 <_read_r+0x1a>
   82970:	bd70      	pop	{r4, r5, r6, pc}
   82972:	6823      	ldr	r3, [r4, #0]
   82974:	2b00      	cmp	r3, #0
   82976:	d0fb      	beq.n	82970 <_read_r+0x18>
   82978:	6033      	str	r3, [r6, #0]
   8297a:	bd70      	pop	{r4, r5, r6, pc}
   8297c:	20070a74 	.word	0x20070a74
   82980:	00000001 	.word	0x00000001
   82984:	00000002 	.word	0x00000002
   82988:	00000004 	.word	0x00000004
   8298c:	00000008 	.word	0x00000008
   82990:	00000010 	.word	0x00000010
   82994:	00000020 	.word	0x00000020
   82998:	00000040 	.word	0x00000040
   8299c:	00000080 	.word	0x00000080
   829a0:	00000100 	.word	0x00000100
   829a4:	00000200 	.word	0x00000200
   829a8:	00000400 	.word	0x00000400
   829ac:	50202d2d 	.word	0x50202d2d
   829b0:	4c204d57 	.word	0x4c204d57
   829b4:	45204445 	.word	0x45204445
   829b8:	706d6178 	.word	0x706d6178
   829bc:	2d20656c 	.word	0x2d20656c
   829c0:	2d0a0d2d 	.word	0x2d0a0d2d
   829c4:	7241202d 	.word	0x7241202d
   829c8:	6e697564 	.word	0x6e697564
   829cc:	7544206f 	.word	0x7544206f
   829d0:	20582f65 	.word	0x20582f65
   829d4:	0a0d2d2d 	.word	0x0a0d2d2d
   829d8:	43202d2d 	.word	0x43202d2d
   829dc:	69706d6f 	.word	0x69706d6f
   829e0:	3a64656c 	.word	0x3a64656c
   829e4:	72704120 	.word	0x72704120
   829e8:	20373220 	.word	0x20373220
   829ec:	36313032 	.word	0x36313032
   829f0:	3a343020 	.word	0x3a343020
   829f4:	303a3634 	.word	0x303a3634
   829f8:	2d2d2033 	.word	0x2d2d2033
   829fc:	0000000d 	.word	0x0000000d
   82a00:	00000043 	.word	0x00000043

00082a04 <_global_impure_ptr>:
   82a04:	20070138 0000000a                       8.. ....

00082a0c <_init>:
   82a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82a0e:	bf00      	nop
   82a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a12:	bc08      	pop	{r3}
   82a14:	469e      	mov	lr, r3
   82a16:	4770      	bx	lr

00082a18 <__init_array_start>:
   82a18:	00081211 	.word	0x00081211

00082a1c <__frame_dummy_init_array_entry>:
   82a1c:	00080119                                ....

00082a20 <_fini>:
   82a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82a22:	bf00      	nop
   82a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a26:	bc08      	pop	{r3}
   82a28:	469e      	mov	lr, r3
   82a2a:	4770      	bx	lr

00082a2c <__fini_array_start>:
   82a2c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <fade_in.8318>:
20070130:	00000001 00000000                       ........

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00082a00 00000000 00000000 00000000     .*..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_trim_threshold>:
2007096c:	00020000                                ....

20070970 <__malloc_sbrk_base>:
20070970:	ffffffff                                ....
